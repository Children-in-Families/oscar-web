# This is an autogenerated file for dynamic methods in Referral
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Referral::ActiveRecord_Relation < ActiveRecord::Relation
  include Referral::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Referral)
end

class Referral::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Referral::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Referral)
end

class Referral < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Referral::ModelRelationShared
  include Referral::InstanceMethods
  Elem = type_template(fixed: Referral)
end

module Referral::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Date)) }
  def client_date_of_birth(); end

  sig { params(value: T.nilable(Date)).void }
  def client_date_of_birth=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_date_of_birth?(*args); end

  sig { returns(T.nilable(String)) }
  def client_gender(); end

  sig { params(value: T.nilable(String)).void }
  def client_gender=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_gender?(*args); end

  sig { returns(T.nilable(String)) }
  def client_global_id(); end

  sig { params(value: T.nilable(String)).void }
  def client_global_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_global_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def client_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def client_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_id?(*args); end

  sig { returns(T.nilable(String)) }
  def client_name(); end

  sig { params(value: T.nilable(String)).void }
  def client_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_name?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def consent_form(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def consent_form=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def consent_form?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Date)) }
  def date_of_referral(); end

  sig { params(value: T.nilable(Date)).void }
  def date_of_referral=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date_of_referral?(*args); end

  sig { returns(T.nilable(String)) }
  def external_case_worker_id(); end

  sig { params(value: T.nilable(String)).void }
  def external_case_worker_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def external_case_worker_id?(*args); end

  sig { returns(T.nilable(String)) }
  def external_case_worker_name(); end

  sig { params(value: T.nilable(String)).void }
  def external_case_worker_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def external_case_worker_name?(*args); end

  sig { returns(T.nilable(String)) }
  def external_id(); end

  sig { params(value: T.nilable(String)).void }
  def external_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def external_id?(*args); end

  sig { returns(T.nilable(String)) }
  def external_id_display(); end

  sig { params(value: T.nilable(String)).void }
  def external_id_display=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def external_id_display?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def mosvy_number(); end

  sig { params(value: T.nilable(String)).void }
  def mosvy_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mosvy_number?(*args); end

  sig { returns(T.nilable(String)) }
  def name_of_referee(); end

  sig { params(value: T.nilable(String)).void }
  def name_of_referee=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name_of_referee?(*args); end

  sig { returns(T.nilable(String)) }
  def ngo_name(); end

  sig { params(value: T.nilable(String)).void }
  def ngo_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ngo_name?(*args); end

  sig { returns(T.nilable(Integer)) }
  def referee_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def referee_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referee_id?(*args); end

  sig { returns(T.nilable(String)) }
  def referral_phone(); end

  sig { params(value: T.nilable(String)).void }
  def referral_phone=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referral_phone?(*args); end

  sig { returns(T.nilable(String)) }
  def referral_reason(); end

  sig { params(value: T.nilable(String)).void }
  def referral_reason=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referral_reason?(*args); end

  sig { returns(T.nilable(String)) }
  def referred_from(); end

  sig { params(value: T.nilable(String)).void }
  def referred_from=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referred_from?(*args); end

  sig { returns(T.nilable(String)) }
  def referred_to(); end

  sig { params(value: T.nilable(String)).void }
  def referred_to=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referred_to?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def saved(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def saved=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved?(*args); end

  sig { returns(T.nilable(String)) }
  def slug(); end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def slug?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(String)) }
  def village_code(); end

  sig { params(value: T.nilable(String)).void }
  def village_code=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def village_code?(*args); end

end

class Referral
  extend T::Sig

  sig { returns(T.nilable(::Client)) }
  def client(); end

  sig { params(value: T.nilable(::Client)).void }
  def client=(value); end

  sig { returns(::Service::ActiveRecord_Associations_CollectionProxy) }
  def services(); end

  sig { params(value: T.any(T::Array[::Service], ::Service::ActiveRecord_Associations_CollectionProxy)).void }
  def services=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module Referral::ModelRelationShared
  extend T::Sig

  sig { returns(Referral::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def delivered(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def externals(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def get_external_systems(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def most_recents(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def received(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def received_and_saved(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def saved(*args); end

  sig { params(args: T.untyped).returns(Referral::ActiveRecord_Relation) }
  def unsaved(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Referral::ActiveRecord_Relation) }
  def except(*args, &block); end

end
