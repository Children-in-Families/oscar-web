# This is an autogenerated file for dynamic methods in CaseNoteDomainGroup
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class CaseNoteDomainGroup::ActiveRecord_Relation < ActiveRecord::Relation
  include CaseNoteDomainGroup::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CaseNoteDomainGroup)
end

class CaseNoteDomainGroup::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include CaseNoteDomainGroup::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CaseNoteDomainGroup)
end

class CaseNoteDomainGroup < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend CaseNoteDomainGroup::ModelRelationShared
  include CaseNoteDomainGroup::InstanceMethods
  Elem = type_template(fixed: CaseNoteDomainGroup)
end

module CaseNoteDomainGroup::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T.untyped)) }
  def attachments(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def attachments=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def attachments?(*args); end

  sig { returns(T.nilable(Integer)) }
  def case_note_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def case_note_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_note_id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def domain_group_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def domain_group_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def domain_group_id?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def note(); end

  sig { params(value: T.nilable(String)).void }
  def note=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def note?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class CaseNoteDomainGroup
  extend T::Sig

  sig { returns(T.nilable(::CaseNote)) }
  def case_note(); end

  sig { params(value: T.nilable(::CaseNote)).void }
  def case_note=(value); end

  sig { returns(T.nilable(::DomainGroup)) }
  def domain_group(); end

  sig { params(value: T.nilable(::DomainGroup)).void }
  def domain_group=(value); end

  sig { returns(::Task::ActiveRecord_Associations_CollectionProxy) }
  def tasks(); end

  sig { params(value: T.any(T::Array[::Task], ::Task::ActiveRecord_Associations_CollectionProxy)).void }
  def tasks=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module CaseNoteDomainGroup::ModelRelationShared
  extend T::Sig

  sig { returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNoteDomainGroup::ActiveRecord_Relation) }
  def except(*args, &block); end

end
