# This is an autogenerated file for dynamic methods in FieldSetting
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class FieldSetting::ActiveRecord_Relation < ActiveRecord::Relation
  include FieldSetting::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: FieldSetting)
end

class FieldSetting::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include FieldSetting::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: FieldSetting)
end

class FieldSetting < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend FieldSetting::ModelRelationShared
  include FieldSetting::InstanceMethods
  Elem = type_template(fixed: FieldSetting)
end

module FieldSetting::InstanceMethods
  extend T::Sig

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def current_label(); end

  sig { params(value: T.nilable(String)).void }
  def current_label=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def current_label?(*args); end

  sig { returns(T.nilable(String)) }
  def for_instances(); end

  sig { params(value: T.nilable(String)).void }
  def for_instances=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def for_instances?(*args); end

  sig { returns(String) }
  def group(); end

  sig { params(value: String).void }
  def group=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def group?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def klass_name(); end

  sig { params(value: T.nilable(String)).void }
  def klass_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def klass_name?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def label_only(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def label_only=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def label_only?(*args); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def required(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def required=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def required?(*args); end

  sig { returns(String) }
  def type(); end

  sig { params(value: String).void }
  def type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def type?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T::Boolean) }
  def visible(); end

  sig { params(value: T::Boolean).void }
  def visible=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def visible?(*args); end

end

class FieldSetting
  extend T::Sig

  sig { returns(::FieldSetting::Translation::ActiveRecord_Associations_CollectionProxy) }
  def translations(); end

  sig { params(value: T.any(T::Array[::FieldSetting::Translation], ::FieldSetting::Translation::ActiveRecord_Associations_CollectionProxy)).void }
  def translations=(value); end

end

module FieldSetting::ModelRelationShared
  extend T::Sig

  sig { returns(FieldSetting::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(FieldSetting::ActiveRecord_Relation) }
  def except(*args, &block); end

end
