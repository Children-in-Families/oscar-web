# This is an autogenerated file for dynamic methods in CustomAssessmentSetting
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class CustomAssessmentSetting::ActiveRecord_Relation < ActiveRecord::Relation
  include CustomAssessmentSetting::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CustomAssessmentSetting)
end

class CustomAssessmentSetting::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include CustomAssessmentSetting::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CustomAssessmentSetting)
end

class CustomAssessmentSetting < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend CustomAssessmentSetting::ModelRelationShared
  include CustomAssessmentSetting::InstanceMethods
  Elem = type_template(fixed: CustomAssessmentSetting)
end

module CustomAssessmentSetting::InstanceMethods
  extend T::Sig

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def custom_age(); end

  sig { params(value: T.nilable(Integer)).void }
  def custom_age=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_age?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_assessment_frequency(); end

  sig { params(value: T.nilable(String)).void }
  def custom_assessment_frequency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_assessment_frequency?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_assessment_name(); end

  sig { params(value: T.nilable(String)).void }
  def custom_assessment_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_assessment_name?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_custom_assessment(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_custom_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_custom_assessment?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def max_custom_assessment(); end

  sig { params(value: T.nilable(Integer)).void }
  def max_custom_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def max_custom_assessment?(*args); end

  sig { returns(T.nilable(Integer)) }
  def setting_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def setting_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def setting_id?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class CustomAssessmentSetting
  extend T::Sig

  sig { returns(::CaseNote::ActiveRecord_Associations_CollectionProxy) }
  def case_notes(); end

  sig { params(value: T.any(T::Array[::CaseNote], ::CaseNote::ActiveRecord_Associations_CollectionProxy)).void }
  def case_notes=(value); end

  sig { returns(::Domain::ActiveRecord_Associations_CollectionProxy) }
  def domains(); end

  sig { params(value: T.any(T::Array[::Domain], ::Domain::ActiveRecord_Associations_CollectionProxy)).void }
  def domains=(value); end

  sig { returns(T.nilable(::Setting)) }
  def setting(); end

  sig { params(value: T.nilable(::Setting)).void }
  def setting=(value); end

end

module CustomAssessmentSetting::ModelRelationShared
  extend T::Sig

  sig { returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def any_custom_assessment_enable?(*args); end

  sig { params(args: T.untyped).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def only_enable_custom_assessment(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomAssessmentSetting::ActiveRecord_Relation) }
  def except(*args, &block); end

end
