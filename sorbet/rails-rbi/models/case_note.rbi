# This is an autogenerated file for dynamic methods in CaseNote
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class CaseNote::ActiveRecord_Relation < ActiveRecord::Relation
  include CaseNote::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CaseNote)
end

class CaseNote::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include CaseNote::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CaseNote)
end

class CaseNote < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend CaseNote::ModelRelationShared
  include CaseNote::InstanceMethods
  Elem = type_template(fixed: CaseNote)
end

module CaseNote::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Integer)) }
  def assessment_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def assessment_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assessment_id?(*args); end

  sig { returns(T.nilable(String)) }
  def attendee(); end

  sig { params(value: T.nilable(String)).void }
  def attendee=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def attendee?(*args); end

  sig { returns(T.nilable(Integer)) }
  def client_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def client_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def custom(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def custom=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom?(*args); end

  sig { returns(T.nilable(Integer)) }
  def custom_assessment_setting_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def custom_assessment_setting_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_assessment_setting_id?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def interaction_type(); end

  sig { params(value: T.nilable(String)).void }
  def interaction_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def interaction_type?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def meeting_date(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def meeting_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def meeting_date?(*args); end

  sig { returns(T.nilable(String)) }
  def note(); end

  sig { params(value: T.nilable(String)).void }
  def note=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def note?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def selected_domain_group_ids(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def selected_domain_group_ids=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def selected_domain_group_ids?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class CaseNote
  extend T::Sig

  sig { returns(T.nilable(::Assessment)) }
  def assessment(); end

  sig { params(value: T.nilable(::Assessment)).void }
  def assessment=(value); end

  sig { returns(::CaseNoteDomainGroup::ActiveRecord_Associations_CollectionProxy) }
  def case_note_domain_groups(); end

  sig { params(value: T.any(T::Array[::CaseNoteDomainGroup], ::CaseNoteDomainGroup::ActiveRecord_Associations_CollectionProxy)).void }
  def case_note_domain_groups=(value); end

  sig { returns(T.nilable(::Client)) }
  def client(); end

  sig { params(value: T.nilable(::Client)).void }
  def client=(value); end

  sig { returns(T.nilable(::CustomAssessmentSetting)) }
  def custom_assessment_setting(); end

  sig { params(value: T.nilable(::CustomAssessmentSetting)).void }
  def custom_assessment_setting=(value); end

  sig { returns(::DomainGroup::ActiveRecord_Associations_CollectionProxy) }
  def domain_groups(); end

  sig { params(value: T.any(T::Array[::DomainGroup], ::DomainGroup::ActiveRecord_Associations_CollectionProxy)).void }
  def domain_groups=(value); end

  sig { returns(::Task::ActiveRecord_Associations_CollectionProxy) }
  def tasks(); end

  sig { params(value: T.any(T::Array[::Task], ::Task::ActiveRecord_Associations_CollectionProxy)).void }
  def tasks=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module CaseNote::ModelRelationShared
  extend T::Sig

  sig { returns(CaseNote::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def most_recents(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def no_case_note_in(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def recent_meeting_dates(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def except(*args, &block); end

end
