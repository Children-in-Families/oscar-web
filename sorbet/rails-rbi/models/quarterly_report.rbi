# This is an autogenerated file for dynamic methods in QuarterlyReport
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class QuarterlyReport::ActiveRecord_Relation < ActiveRecord::Relation
  include QuarterlyReport::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: QuarterlyReport)
end

class QuarterlyReport::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include QuarterlyReport::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: QuarterlyReport)
end

class QuarterlyReport < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend QuarterlyReport::ModelRelationShared
  include QuarterlyReport::InstanceMethods
  Elem = type_template(fixed: QuarterlyReport)
end

module QuarterlyReport::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Integer)) }
  def case_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def case_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_id?(*args); end

  sig { returns(T.nilable(String)) }
  def child_school_attendance_or_progress(); end

  sig { params(value: T.nilable(String)).void }
  def child_school_attendance_or_progress=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def child_school_attendance_or_progress?(*args); end

  sig { returns(T.nilable(Integer)) }
  def code(); end

  sig { params(value: T.nilable(Integer)).void }
  def code=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def code?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def describe_if_yes(); end

  sig { params(value: T.nilable(String)).void }
  def describe_if_yes=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def describe_if_yes?(*args); end

  sig { returns(T.nilable(String)) }
  def describe_the_family_current_situation(); end

  sig { params(value: T.nilable(String)).void }
  def describe_the_family_current_situation=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def describe_the_family_current_situation?(*args); end

  sig { returns(T.nilable(String)) }
  def general_appearance_of_home(); end

  sig { params(value: T.nilable(String)).void }
  def general_appearance_of_home=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def general_appearance_of_home?(*args); end

  sig { returns(T.nilable(String)) }
  def general_health_or_appearance(); end

  sig { params(value: T.nilable(String)).void }
  def general_health_or_appearance=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def general_health_or_appearance?(*args); end

  sig { returns(T.nilable(String)) }
  def has_the_situation_changed_from_the_previous_visit(); end

  sig { params(value: T.nilable(String)).void }
  def has_the_situation_changed_from_the_previous_visit=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def has_the_situation_changed_from_the_previous_visit?(*args); end

  sig { returns(T.nilable(String)) }
  def how_are_they_being_misused(); end

  sig { params(value: T.nilable(String)).void }
  def how_are_they_being_misused=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def how_are_they_being_misused?(*args); end

  sig { returns(T.nilable(String)) }
  def how_did_i_encourage_the_client(); end

  sig { params(value: T.nilable(String)).void }
  def how_did_i_encourage_the_client=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def how_did_i_encourage_the_client?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def money_and_supplies_being_used_appropriately(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def money_and_supplies_being_used_appropriately=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def money_and_supplies_being_used_appropriately?(*args); end

  sig { returns(T.nilable(String)) }
  def observations_of_drug_alchohol_abuse(); end

  sig { params(value: T.nilable(String)).void }
  def observations_of_drug_alchohol_abuse=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def observations_of_drug_alchohol_abuse?(*args); end

  sig { returns(T.nilable(String)) }
  def spiritual_developments_with_the_child_or_family(); end

  sig { params(value: T.nilable(String)).void }
  def spiritual_developments_with_the_child_or_family=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def spiritual_developments_with_the_child_or_family?(*args); end

  sig { returns(T.nilable(Integer)) }
  def staff_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def staff_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def staff_id?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Date)) }
  def visit_date(); end

  sig { params(value: T.nilable(Date)).void }
  def visit_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def visit_date?(*args); end

  sig { returns(T.nilable(String)) }
  def what_future_teachings_or_trainings_could_help_the_client(); end

  sig { params(value: T.nilable(String)).void }
  def what_future_teachings_or_trainings_could_help_the_client=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def what_future_teachings_or_trainings_could_help_the_client?(*args); end

  sig { returns(T.nilable(String)) }
  def what_is_my_plan_for_the_next_visit_to_the_client(); end

  sig { params(value: T.nilable(String)).void }
  def what_is_my_plan_for_the_next_visit_to_the_client=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def what_is_my_plan_for_the_next_visit_to_the_client?(*args); end

end

class QuarterlyReport
  extend T::Sig

  sig { returns(T.nilable(::Case)) }
  def case(); end

  sig { params(value: T.nilable(::Case)).void }
  def case=(value); end

  sig { returns(T.nilable(::User)) }
  def staff_information(); end

  sig { params(value: T.nilable(::User)).void }
  def staff_information=(value); end

end

module QuarterlyReport::ModelRelationShared
  extend T::Sig

  sig { returns(QuarterlyReport::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(QuarterlyReport::ActiveRecord_Relation) }
  def except(*args, &block); end

end
