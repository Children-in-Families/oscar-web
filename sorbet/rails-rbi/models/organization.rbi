# This is an autogenerated file for dynamic methods in Organization
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Organization::ActiveRecord_Relation < ActiveRecord::Relation
  include Organization::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Organization)
end

class Organization::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Organization::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Organization)
end

class Organization < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Organization::ModelRelationShared
  include Organization::InstanceMethods
  Elem = type_template(fixed: Organization)
end

module Organization::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Integer)) }
  def accepted_client(); end

  sig { params(value: T.nilable(Integer)).void }
  def accepted_client=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def accepted_client?(*args); end

  sig { returns(T.nilable(Integer)) }
  def active_client(); end

  sig { params(value: T.nilable(Integer)).void }
  def active_client=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def active_client?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def aht(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def aht=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def aht?(*args); end

  sig { returns(T.nilable(Integer)) }
  def clients_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def clients_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def clients_count?(*args); end

  sig { returns(T.nilable(String)) }
  def country(); end

  sig { params(value: T.nilable(String)).void }
  def country=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def country?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def demo(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def demo=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def demo?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def fcf_ngo(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def fcf_ngo=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def fcf_ngo?(*args); end

  sig { returns(T.nilable(String)) }
  def full_name(); end

  sig { params(value: T.nilable(String)).void }
  def full_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def full_name?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def integrated(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def integrated=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def integrated?(*args); end

  sig { returns(T.nilable(String)) }
  def logo(); end

  sig { params(value: T.nilable(String)).void }
  def logo=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def logo?(*args); end

  sig { returns(T.nilable(String)) }
  def referral_source_category_name(); end

  sig { params(value: T.nilable(String)).void }
  def referral_source_category_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referral_source_category_name?(*args); end

  sig { returns(T.nilable(String)) }
  def short_name(); end

  sig { params(value: T.nilable(String)).void }
  def short_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def short_name?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def supported_languages(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def supported_languages=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def supported_languages?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Organization
  extend T::Sig

  sig { returns(::DonorOrganization::ActiveRecord_Associations_CollectionProxy) }
  def donor_organizations(); end

  sig { params(value: T.any(T::Array[::DonorOrganization], ::DonorOrganization::ActiveRecord_Associations_CollectionProxy)).void }
  def donor_organizations=(value); end

  sig { returns(::Donor::ActiveRecord_Associations_CollectionProxy) }
  def donors(); end

  sig { params(value: T.any(T::Array[::Donor], ::Donor::ActiveRecord_Associations_CollectionProxy)).void }
  def donors=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def employees(); end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def employees=(value); end

  sig { returns(::GlobalIdentityOrganization::ActiveRecord_Associations_CollectionProxy) }
  def global_identity_organizations(); end

  sig { params(value: T.any(T::Array[::GlobalIdentityOrganization], ::GlobalIdentityOrganization::ActiveRecord_Associations_CollectionProxy)).void }
  def global_identity_organizations=(value); end

end

module Organization::ModelRelationShared
  extend T::Sig

  sig { returns(Organization::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def cambodian(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def exclude_current(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def only_integrated(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def oscar(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def skip_dup_checking_orgs(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def test_ngos(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def visible(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def without_cwd(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def without_demo(*args); end

  sig { params(args: T.untyped).returns(Organization::ActiveRecord_Relation) }
  def without_shared(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Organization::ActiveRecord_Relation) }
  def except(*args, &block); end

end
