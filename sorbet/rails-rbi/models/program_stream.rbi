# This is an autogenerated file for dynamic methods in ProgramStream
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class ProgramStream::ActiveRecord_Relation < ActiveRecord::Relation
  include ProgramStream::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: ProgramStream)
end

class ProgramStream::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include ProgramStream::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: ProgramStream)
end

class ProgramStream < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend ProgramStream::ModelRelationShared
  include ProgramStream::InstanceMethods
  Elem = type_template(fixed: ProgramStream)
end

module ProgramStream::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T.untyped)) }
  def archived_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def archived_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def archived_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def completed(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def completed=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def completed?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def description(); end

  sig { params(value: T.nilable(String)).void }
  def description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def description?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def enrollment(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def enrollment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enrollment?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def exit_program(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def exit_program=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def exit_program?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def mutual_dependence(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def mutual_dependence=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mutual_dependence?(*args); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(String)) }
  def ngo_name(); end

  sig { params(value: T.nilable(String)).void }
  def ngo_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ngo_name?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def program_exclusive(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def program_exclusive=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def program_exclusive?(*args); end

  sig { returns(T.nilable(Integer)) }
  def quantity(); end

  sig { params(value: T.nilable(Integer)).void }
  def quantity=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def quantity?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def rules(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def rules=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def rules?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def tracking_required(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def tracking_required=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def tracking_required?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class ProgramStream
  extend T::Sig

  sig { returns(::ClientEnrollment::ActiveRecord_Associations_CollectionProxy) }
  def client_enrollments(); end

  sig { params(value: T.any(T::Array[::ClientEnrollment], ::ClientEnrollment::ActiveRecord_Associations_CollectionProxy)).void }
  def client_enrollments=(value); end

  sig { returns(::Client::ActiveRecord_Associations_CollectionProxy) }
  def clients(); end

  sig { params(value: T.any(T::Array[::Client], ::Client::ActiveRecord_Associations_CollectionProxy)).void }
  def clients=(value); end

  sig { returns(::DomainProgramStream::ActiveRecord_Associations_CollectionProxy) }
  def domain_program_streams(); end

  sig { params(value: T.any(T::Array[::DomainProgramStream], ::DomainProgramStream::ActiveRecord_Associations_CollectionProxy)).void }
  def domain_program_streams=(value); end

  sig { returns(::Domain::ActiveRecord_Associations_CollectionProxy) }
  def domains(); end

  sig { params(value: T.any(T::Array[::Domain], ::Domain::ActiveRecord_Associations_CollectionProxy)).void }
  def domains=(value); end

  sig { returns(::LeaveProgram::ActiveRecord_Associations_CollectionProxy) }
  def leave_programs(); end

  sig { params(value: T.any(T::Array[::LeaveProgram], ::LeaveProgram::ActiveRecord_Associations_CollectionProxy)).void }
  def leave_programs=(value); end

  sig { returns(::ProgramStreamPermission::ActiveRecord_Associations_CollectionProxy) }
  def program_stream_permissions(); end

  sig { params(value: T.any(T::Array[::ProgramStreamPermission], ::ProgramStreamPermission::ActiveRecord_Associations_CollectionProxy)).void }
  def program_stream_permissions=(value); end

  sig { returns(::ProgramStreamService::ActiveRecord_Associations_CollectionProxy) }
  def program_stream_services(); end

  sig { params(value: T.any(T::Array[::ProgramStreamService], ::ProgramStreamService::ActiveRecord_Associations_CollectionProxy)).void }
  def program_stream_services=(value); end

  sig { returns(::Service::ActiveRecord_Associations_CollectionProxy) }
  def services(); end

  sig { params(value: T.any(T::Array[::Service], ::Service::ActiveRecord_Associations_CollectionProxy)).void }
  def services=(value); end

  sig { returns(::Tracking::ActiveRecord_Associations_CollectionProxy) }
  def trackings(); end

  sig { params(value: T.any(T::Array[::Tracking], ::Tracking::ActiveRecord_Associations_CollectionProxy)).void }
  def trackings=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def users(); end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def users=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module ProgramStream::ModelRelationShared
  extend T::Sig

  sig { returns(ProgramStream::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def by_name(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def complete(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def deleted_after_time(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def deleted_before_time(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def deleted_inside_time_window(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def filter(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def name_like(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def ordered(*args); end

  sig { params(args: T.untyped).returns(ProgramStream::ActiveRecord_Relation) }
  def ordered_by(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ProgramStream::ActiveRecord_Relation) }
  def except(*args, &block); end

end
