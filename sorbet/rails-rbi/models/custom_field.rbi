# This is an autogenerated file for dynamic methods in CustomField
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class CustomField::ActiveRecord_Relation < ActiveRecord::Relation
  include CustomField::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CustomField)
end

class CustomField::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include CustomField::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: CustomField)
end

class CustomField < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend CustomField::ModelRelationShared
  include CustomField::InstanceMethods
  Elem = type_template(fixed: CustomField)
end

module CustomField::InstanceMethods
  extend T::Sig

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def entity_type(); end

  sig { params(value: T.nilable(String)).void }
  def entity_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def entity_type?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def fields(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def fields=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def fields?(*args); end

  sig { returns(T.nilable(String)) }
  def form_title(); end

  sig { params(value: T.nilable(String)).void }
  def form_title=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def form_title?(*args); end

  sig { returns(T.nilable(String)) }
  def frequency(); end

  sig { params(value: T.nilable(String)).void }
  def frequency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def frequency?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def ngo_name(); end

  sig { params(value: T.nilable(String)).void }
  def ngo_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ngo_name?(*args); end

  sig { returns(T.nilable(String)) }
  def properties(); end

  sig { params(value: T.nilable(String)).void }
  def properties=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def properties?(*args); end

  sig { returns(T.nilable(Integer)) }
  def time_of_frequency(); end

  sig { params(value: T.nilable(Integer)).void }
  def time_of_frequency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def time_of_frequency?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class CustomField
  extend T::Sig

  sig { returns(ActiveRecord::Associations::CollectionProxy) }
  def clients(); end

  sig { params(value: T.any(T::Array[T.untyped], ActiveRecord::Associations::CollectionProxy)).void }
  def clients=(value); end

  sig { returns(::CustomFieldPermission::ActiveRecord_Associations_CollectionProxy) }
  def custom_field_permissions(); end

  sig { params(value: T.any(T::Array[::CustomFieldPermission], ::CustomFieldPermission::ActiveRecord_Associations_CollectionProxy)).void }
  def custom_field_permissions=(value); end

  sig { returns(::CustomFieldProperty::ActiveRecord_Associations_CollectionProxy) }
  def custom_field_properties(); end

  sig { params(value: T.any(T::Array[::CustomFieldProperty], ::CustomFieldProperty::ActiveRecord_Associations_CollectionProxy)).void }
  def custom_field_properties=(value); end

  sig { returns(ActiveRecord::Associations::CollectionProxy) }
  def families(); end

  sig { params(value: T.any(T::Array[T.untyped], ActiveRecord::Associations::CollectionProxy)).void }
  def families=(value); end

  sig { returns(ActiveRecord::Associations::CollectionProxy) }
  def partners(); end

  sig { params(value: T.any(T::Array[T.untyped], ActiveRecord::Associations::CollectionProxy)).void }
  def partners=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def user_permissions(); end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def user_permissions=(value); end

  sig { returns(ActiveRecord::Associations::CollectionProxy) }
  def users(); end

  sig { params(value: T.any(T::Array[T.untyped], ActiveRecord::Associations::CollectionProxy)).void }
  def users=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module CustomField::ModelRelationShared
  extend T::Sig

  sig { returns(CustomField::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def by_form_title(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def client_forms(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def family_forms(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def not_used_forms(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def order_by_form_title(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def ordered_by(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def partner_forms(*args); end

  sig { params(args: T.untyped).returns(CustomField::ActiveRecord_Relation) }
  def user_forms(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CustomField::ActiveRecord_Relation) }
  def except(*args, &block); end

end
