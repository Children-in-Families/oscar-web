# This is an autogenerated file for dynamic methods in AdminUser
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class AdminUser::ActiveRecord_Relation < ActiveRecord::Relation
  include AdminUser::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: AdminUser)
end

class AdminUser::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include AdminUser::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: AdminUser)
end

class AdminUser < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend AdminUser::ModelRelationShared
  include AdminUser::InstanceMethods
  Elem = type_template(fixed: AdminUser)
end

module AdminUser::InstanceMethods
  extend T::Sig

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(String) }
  def email(); end

  sig { params(value: String).void }
  def email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email?(*args); end

  sig { returns(String) }
  def encrypted_password(); end

  sig { params(value: String).void }
  def encrypted_password=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def encrypted_password?(*args); end

  sig { returns(T.nilable(String)) }
  def first_name(); end

  sig { params(value: T.nilable(String)).void }
  def first_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def first_name?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def last_name(); end

  sig { params(value: T.nilable(String)).void }
  def last_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_name?(*args); end

  sig { returns(String) }
  def provider(); end

  sig { params(value: String).void }
  def provider=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def provider?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def remember_created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def remember_created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def remember_created_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def reset_password_sent_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def reset_password_sent_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def reset_password_sent_at?(*args); end

  sig { returns(T.nilable(String)) }
  def reset_password_token(); end

  sig { params(value: T.nilable(String)).void }
  def reset_password_token=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def reset_password_token?(*args); end

  sig { returns(T.nilable(String)) }
  def token(); end

  sig { params(value: T.nilable(String)).void }
  def token=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def token?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def tokens(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def tokens=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def tokens?(*args); end

  sig { returns(String) }
  def uid(); end

  sig { params(value: String).void }
  def uid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def uid?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class AdminUser
  extend T::Sig

end

module AdminUser::ModelRelationShared
  extend T::Sig

  sig { returns(AdminUser::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(AdminUser::ActiveRecord_Relation) }
  def except(*args, &block); end

end
