# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class User::ActiveRecord_Relation < ActiveRecord::Relation
  include User::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include User::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend User::ModelRelationShared
  include User::InstanceMethods
  Elem = type_template(fixed: User)
end

module User::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T.untyped)) }
  def activated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def activated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def activated_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def admin(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def admin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def admin?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def archived(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def archived=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def archived?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def calendar_integration(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def calendar_integration=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def calendar_integration?(*args); end

  sig { returns(T.nilable(Integer)) }
  def cases_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def cases_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def cases_count?(*args); end

  sig { returns(T.nilable(Integer)) }
  def changelogs_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def changelogs_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def changelogs_count?(*args); end

  sig { returns(T.nilable(Integer)) }
  def clients_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def clients_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def clients_count?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def current_sign_in_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def current_sign_in_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def current_sign_in_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def current_sign_in_ip(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def current_sign_in_ip=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def current_sign_in_ip?(*args); end

  sig { returns(T.nilable(Date)) }
  def date_of_birth(); end

  sig { params(value: T.nilable(Date)).void }
  def date_of_birth=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date_of_birth?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def deactivated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def deactivated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def deactivated_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def deleted_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def deleted_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def deleted_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def department_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def department_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def department_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def disable(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def disable=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def disable?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def domain_warning(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def domain_warning=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def domain_warning?(*args); end

  sig { returns(String) }
  def email(); end

  sig { params(value: String).void }
  def email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_gov_log_in(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_gov_log_in=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_gov_log_in?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_research_log_in(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_research_log_in=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_research_log_in?(*args); end

  sig { returns(String) }
  def encrypted_password(); end

  sig { params(value: String).void }
  def encrypted_password=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def encrypted_password?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def expires_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def expires_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def expires_at?(*args); end

  sig { returns(T.nilable(String)) }
  def first_name(); end

  sig { params(value: T.nilable(String)).void }
  def first_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def first_name?(*args); end

  sig { returns(T.nilable(String)) }
  def gender(); end

  sig { params(value: T.nilable(String)).void }
  def gender=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gender?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def job_title(); end

  sig { params(value: T.nilable(String)).void }
  def job_title=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def job_title?(*args); end

  sig { returns(T.nilable(String)) }
  def last_name(); end

  sig { params(value: T.nilable(String)).void }
  def last_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_name?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def last_sign_in_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_sign_in_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_sign_in_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def last_sign_in_ip(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_sign_in_ip=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_sign_in_ip?(*args); end

  sig { returns(T.nilable(Integer)) }
  def manager_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def manager_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def manager_id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def manager_ids(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def manager_ids=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def manager_ids?(*args); end

  sig { returns(T.nilable(String)) }
  def mobile(); end

  sig { params(value: T.nilable(String)).void }
  def mobile=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mobile?(*args); end

  sig { returns(T.nilable(Integer)) }
  def organization_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def organization_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def organization_id?(*args); end

  sig { returns(T.nilable(String)) }
  def organization_name(); end

  sig { params(value: T.nilable(String)).void }
  def organization_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def organization_name?(*args); end

  sig { returns(T.nilable(String)) }
  def pin_code(); end

  sig { params(value: T.nilable(String)).void }
  def pin_code=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def pin_code?(*args); end

  sig { returns(T.nilable(Integer)) }
  def pin_number(); end

  sig { params(value: T.nilable(Integer)).void }
  def pin_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def pin_number?(*args); end

  sig { returns(T.nilable(String)) }
  def preferred_language(); end

  sig { params(value: T.nilable(String)).void }
  def preferred_language=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def preferred_language?(*args); end

  sig { returns(T.nilable(String)) }
  def profile(); end

  sig { params(value: T.nilable(String)).void }
  def profile=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def profile?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def program_warning(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def program_warning=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def program_warning?(*args); end

  sig { returns(String) }
  def provider(); end

  sig { params(value: String).void }
  def provider=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def provider?(*args); end

  sig { returns(T.nilable(Integer)) }
  def province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def province_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def referral_notification(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def referral_notification=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referral_notification?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def remember_created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def remember_created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def remember_created_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def reset_password_sent_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def reset_password_sent_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def reset_password_sent_at?(*args); end

  sig { returns(T.nilable(String)) }
  def reset_password_token(); end

  sig { params(value: T.nilable(String)).void }
  def reset_password_token=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def reset_password_token?(*args); end

  sig { returns(T.nilable(String)) }
  def roles(); end

  sig { params(value: T.nilable(String)).void }
  def roles=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def roles?(*args); end

  sig { returns(Integer) }
  def sign_in_count(); end

  sig { params(value: Integer).void }
  def sign_in_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sign_in_count?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def staff_performance_notification(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def staff_performance_notification=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def staff_performance_notification?(*args); end

  sig { returns(T.nilable(Date)) }
  def start_date(); end

  sig { params(value: T.nilable(Date)).void }
  def start_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def start_date?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def task_notify(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def task_notify=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def task_notify?(*args); end

  sig { returns(T.nilable(Integer)) }
  def tasks_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def tasks_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def tasks_count?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def tokens(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def tokens=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def tokens?(*args); end

  sig { returns(String) }
  def uid(); end

  sig { params(value: String).void }
  def uid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def uid?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class User
  extend T::Sig

  sig { returns(::AdvancedSearch::ActiveRecord_Associations_CollectionProxy) }
  def advanced_searches(); end

  sig { params(value: T.any(T::Array[::AdvancedSearch], ::AdvancedSearch::ActiveRecord_Associations_CollectionProxy)).void }
  def advanced_searches=(value); end

  sig { returns(::Calendar::ActiveRecord_Associations_CollectionProxy) }
  def calendars(); end

  sig { params(value: T.any(T::Array[::Calendar], ::Calendar::ActiveRecord_Associations_CollectionProxy)).void }
  def calendars=(value); end

  sig { returns(::CaseWorkerClient::ActiveRecord_Associations_CollectionProxy) }
  def case_worker_clients(); end

  sig { params(value: T.any(T::Array[::CaseWorkerClient], ::CaseWorkerClient::ActiveRecord_Associations_CollectionProxy)).void }
  def case_worker_clients=(value); end

  sig { returns(::Changelog::ActiveRecord_Associations_CollectionProxy) }
  def changelogs(); end

  sig { params(value: T.any(T::Array[::Changelog], ::Changelog::ActiveRecord_Associations_CollectionProxy)).void }
  def changelogs=(value); end

  sig { returns(::Client::ActiveRecord_Associations_CollectionProxy) }
  def clients(); end

  sig { params(value: T.any(T::Array[::Client], ::Client::ActiveRecord_Associations_CollectionProxy)).void }
  def clients=(value); end

  sig { returns(::CustomFieldPermission::ActiveRecord_Associations_CollectionProxy) }
  def custom_field_permissions(); end

  sig { params(value: T.any(T::Array[::CustomFieldPermission], ::CustomFieldPermission::ActiveRecord_Associations_CollectionProxy)).void }
  def custom_field_permissions=(value); end

  sig { returns(::CustomFieldProperty::ActiveRecord_Associations_CollectionProxy) }
  def custom_field_properties(); end

  sig { params(value: T.any(T::Array[::CustomFieldProperty], ::CustomFieldProperty::ActiveRecord_Associations_CollectionProxy)).void }
  def custom_field_properties=(value); end

  sig { returns(::CustomField::ActiveRecord_Associations_CollectionProxy) }
  def custom_fields(); end

  sig { params(value: T.any(T::Array[::CustomField], ::CustomField::ActiveRecord_Associations_CollectionProxy)).void }
  def custom_fields=(value); end

  sig { returns(T.nilable(::Department)) }
  def department(); end

  sig { params(value: T.nilable(::Department)).void }
  def department=(value); end

  sig { returns(::EnterNgoUser::ActiveRecord_Associations_CollectionProxy) }
  def enter_ngo_users(); end

  sig { params(value: T.any(T::Array[::EnterNgoUser], ::EnterNgoUser::ActiveRecord_Associations_CollectionProxy)).void }
  def enter_ngo_users=(value); end

  sig { returns(::EnterNgo::ActiveRecord_Associations_CollectionProxy) }
  def enter_ngos(); end

  sig { params(value: T.any(T::Array[::EnterNgo], ::EnterNgo::ActiveRecord_Associations_CollectionProxy)).void }
  def enter_ngos=(value); end

  sig { returns(::Family::ActiveRecord_Associations_CollectionProxy) }
  def families(); end

  sig { params(value: T.any(T::Array[::Family], ::Family::ActiveRecord_Associations_CollectionProxy)).void }
  def families=(value); end

  sig { returns(T.nilable(::User)) }
  def manager(); end

  sig { params(value: T.nilable(::User)).void }
  def manager=(value); end

  sig { returns(T.nilable(::Permission)) }
  def permission(); end

  sig { params(value: T.nilable(::Permission)).void }
  def permission=(value); end

  sig { returns(::ProgramStreamPermission::ActiveRecord_Associations_CollectionProxy) }
  def program_stream_permissions(); end

  sig { params(value: T.any(T::Array[::ProgramStreamPermission], ::ProgramStreamPermission::ActiveRecord_Associations_CollectionProxy)).void }
  def program_stream_permissions=(value); end

  sig { returns(::ProgramStream::ActiveRecord_Associations_CollectionProxy) }
  def program_streams(); end

  sig { params(value: T.any(T::Array[::ProgramStream], ::ProgramStream::ActiveRecord_Associations_CollectionProxy)).void }
  def program_streams=(value); end

  sig { returns(T.nilable(::Province)) }
  def province(); end

  sig { params(value: T.nilable(::Province)).void }
  def province=(value); end

  sig { returns(::QuantitativeTypePermission::ActiveRecord_Associations_CollectionProxy) }
  def quantitative_type_permissions(); end

  sig { params(value: T.any(T::Array[::QuantitativeTypePermission], ::QuantitativeTypePermission::ActiveRecord_Associations_CollectionProxy)).void }
  def quantitative_type_permissions=(value); end

  sig { returns(::QuantitativeType::ActiveRecord_Associations_CollectionProxy) }
  def quantitative_types(); end

  sig { params(value: T.any(T::Array[::QuantitativeType], ::QuantitativeType::ActiveRecord_Associations_CollectionProxy)).void }
  def quantitative_types=(value); end

  sig { returns(::Task::ActiveRecord_Associations_CollectionProxy) }
  def tasks(); end

  sig { params(value: T.any(T::Array[::Task], ::Task::ActiveRecord_Associations_CollectionProxy)).void }
  def tasks=(value); end

  sig { returns(::Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy) }
  def thredded_last_user_private_topics(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivateTopic], ::Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_last_user_private_topics=(value); end

  sig { returns(::Thredded::Topic::ActiveRecord_Associations_CollectionProxy) }
  def thredded_last_user_topics(); end

  sig { params(value: T.any(T::Array[::Thredded::Topic], ::Thredded::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_last_user_topics=(value); end

  sig { returns(::Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy) }
  def thredded_post_moderated_records(); end

  sig { params(value: T.any(T::Array[::Thredded::PostModerationRecord], ::Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_post_moderated_records=(value); end

  sig { returns(::Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy) }
  def thredded_post_moderation_records(); end

  sig { params(value: T.any(T::Array[::Thredded::PostModerationRecord], ::Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_post_moderation_records=(value); end

  sig { returns(::Thredded::Post::ActiveRecord_Associations_CollectionProxy) }
  def thredded_posts(); end

  sig { params(value: T.any(T::Array[::Thredded::Post], ::Thredded::Post::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_posts=(value); end

  sig { returns(::Thredded::PrivatePost::ActiveRecord_Associations_CollectionProxy) }
  def thredded_private_posts(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivatePost], ::Thredded::PrivatePost::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_private_posts=(value); end

  sig { returns(::Thredded::UserPrivateTopicReadState::ActiveRecord_Associations_CollectionProxy) }
  def thredded_private_topic_read_states(); end

  sig { params(value: T.any(T::Array[::Thredded::UserPrivateTopicReadState], ::Thredded::UserPrivateTopicReadState::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_private_topic_read_states=(value); end

  sig { returns(::Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy) }
  def thredded_private_topics(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivateTopic], ::Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_private_topics=(value); end

  sig { returns(::Thredded::PrivateUser::ActiveRecord_Associations_CollectionProxy) }
  def thredded_private_users(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivateUser], ::Thredded::PrivateUser::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_private_users=(value); end

  sig { returns(::Thredded::UserTopicFollow::ActiveRecord_Associations_CollectionProxy) }
  def thredded_topic_follows(); end

  sig { params(value: T.any(T::Array[::Thredded::UserTopicFollow], ::Thredded::UserTopicFollow::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_topic_follows=(value); end

  sig { returns(::Thredded::UserTopicReadState::ActiveRecord_Associations_CollectionProxy) }
  def thredded_topic_read_states(); end

  sig { params(value: T.any(T::Array[::Thredded::UserTopicReadState], ::Thredded::UserTopicReadState::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_topic_read_states=(value); end

  sig { returns(::Thredded::Topic::ActiveRecord_Associations_CollectionProxy) }
  def thredded_topics(); end

  sig { params(value: T.any(T::Array[::Thredded::Topic], ::Thredded::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_topics=(value); end

  sig { returns(T.nilable(::Thredded::UserDetail)) }
  def thredded_user_detail(); end

  sig { params(value: T.nilable(::Thredded::UserDetail)).void }
  def thredded_user_detail=(value); end

  sig { returns(::Thredded::UserMessageboardPreference::ActiveRecord_Associations_CollectionProxy) }
  def thredded_user_messageboard_preferences(); end

  sig { params(value: T.any(T::Array[::Thredded::UserMessageboardPreference], ::Thredded::UserMessageboardPreference::ActiveRecord_Associations_CollectionProxy)).void }
  def thredded_user_messageboard_preferences=(value); end

  sig { returns(T.nilable(::Thredded::UserPreference)) }
  def thredded_user_preference(); end

  sig { params(value: T.nilable(::Thredded::UserPreference)).void }
  def thredded_user_preference=(value); end

  sig { returns(::CustomField::ActiveRecord_Associations_CollectionProxy) }
  def user_custom_field_permissions(); end

  sig { params(value: T.any(T::Array[::CustomField], ::CustomField::ActiveRecord_Associations_CollectionProxy)).void }
  def user_custom_field_permissions=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

  sig { returns(::VisitClient::ActiveRecord_Associations_CollectionProxy) }
  def visit_clients(); end

  sig { params(value: T.any(T::Array[::VisitClient], ::VisitClient::ActiveRecord_Associations_CollectionProxy)).void }
  def visit_clients=(value); end

  sig { returns(::Visit::ActiveRecord_Associations_CollectionProxy) }
  def visits(); end

  sig { params(value: T.any(T::Array[::Visit], ::Visit::ActiveRecord_Associations_CollectionProxy)).void }
  def visits=(value); end

end

module User::ModelRelationShared
  extend T::Sig

  sig { returns(User::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def admins(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def case_workers(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def deleted_user(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def department_are(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def email_like(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def females(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def first_name_like(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def has_clients(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def hotline_officer(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def in_department(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def job_title_are(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def last_name_like(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def left_join_thredded_user_details(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def males(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def managers(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def mobile_like(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def non_devs(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def non_locked(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def non_strategic_overviewers(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def notify_email(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def province_are(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def referral_notification_email(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def staff_performances(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def except(*args, &block); end

end
