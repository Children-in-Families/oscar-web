# This is an autogenerated file for dynamic methods in Domain
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Domain::ActiveRecord_Relation < ActiveRecord::Relation
  include Domain::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Domain)
end

class Domain::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Domain::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Domain)
end

class Domain < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Domain::ModelRelationShared
  include Domain::InstanceMethods
  Elem = type_template(fixed: Domain)
end

module Domain::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def custom_assessment_setting_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def custom_assessment_setting_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_assessment_setting_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def custom_domain(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def custom_domain=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_domain?(*args); end

  sig { void }
  def danger!(); end

  sig { returns(T::Boolean) }
  def danger?(); end

  sig { returns(T.nilable(String)) }
  def description(); end

  sig { params(value: T.nilable(String)).void }
  def description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def description?(*args); end

  sig { returns(T.nilable(Integer)) }
  def domain_group_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def domain_group_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def domain_group_id?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def identity(); end

  sig { params(value: T.nilable(String)).void }
  def identity=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def identity?(*args); end

  sig { returns(T.nilable(String)) }
  def local_description(); end

  sig { params(value: T.nilable(String)).void }
  def local_description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def local_description?(*args); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { void }
  def primary!(); end

  sig { returns(T::Boolean) }
  def primary?(); end

  sig { returns(T.nilable(String)) }
  def score_1_color(); end

  sig { params(value: T.nilable(String)).void }
  def score_1_color=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_1_color?(*args); end

  sig { returns(T.nilable(String)) }
  def score_1_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_1_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_1_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_1_local_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_1_local_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_1_local_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_2_color(); end

  sig { params(value: T.nilable(String)).void }
  def score_2_color=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_2_color?(*args); end

  sig { returns(T.nilable(String)) }
  def score_2_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_2_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_2_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_2_local_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_2_local_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_2_local_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_3_color(); end

  sig { params(value: T.nilable(String)).void }
  def score_3_color=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_3_color?(*args); end

  sig { returns(T.nilable(String)) }
  def score_3_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_3_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_3_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_3_local_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_3_local_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_3_local_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_4_color(); end

  sig { params(value: T.nilable(String)).void }
  def score_4_color=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_4_color?(*args); end

  sig { returns(T.nilable(String)) }
  def score_4_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_4_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_4_definition?(*args); end

  sig { returns(T.nilable(String)) }
  def score_4_local_definition(); end

  sig { params(value: T.nilable(String)).void }
  def score_4_local_definition=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def score_4_local_definition?(*args); end

  sig { void }
  def success!(); end

  sig { returns(T::Boolean) }
  def success?(); end

  sig { returns(T.nilable(Integer)) }
  def tasks_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def tasks_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def tasks_count?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { void }
  def warning!(); end

  sig { returns(T::Boolean) }
  def warning?(); end

end

class Domain
  extend T::Sig

  sig { returns(::AssessmentDomain::ActiveRecord_Associations_CollectionProxy) }
  def assessment_domains(); end

  sig { params(value: T.any(T::Array[::AssessmentDomain], ::AssessmentDomain::ActiveRecord_Associations_CollectionProxy)).void }
  def assessment_domains=(value); end

  sig { returns(::Assessment::ActiveRecord_Associations_CollectionProxy) }
  def assessments(); end

  sig { params(value: T.any(T::Array[::Assessment], ::Assessment::ActiveRecord_Associations_CollectionProxy)).void }
  def assessments=(value); end

  sig { returns(T.nilable(::CustomAssessmentSetting)) }
  def custom_assessment_setting(); end

  sig { params(value: T.nilable(::CustomAssessmentSetting)).void }
  def custom_assessment_setting=(value); end

  sig { returns(T.nilable(::DomainGroup)) }
  def domain_group(); end

  sig { params(value: T.nilable(::DomainGroup)).void }
  def domain_group=(value); end

  sig { returns(::DomainProgramStream::ActiveRecord_Associations_CollectionProxy) }
  def domain_program_streams(); end

  sig { params(value: T.any(T::Array[::DomainProgramStream], ::DomainProgramStream::ActiveRecord_Associations_CollectionProxy)).void }
  def domain_program_streams=(value); end

  sig { returns(::ProgramStream::ActiveRecord_Associations_CollectionProxy) }
  def program_streams(); end

  sig { params(value: T.any(T::Array[::ProgramStream], ::ProgramStream::ActiveRecord_Associations_CollectionProxy)).void }
  def program_streams=(value); end

  sig { returns(::Task::ActiveRecord_Associations_CollectionProxy) }
  def tasks(); end

  sig { params(value: T.any(T::Array[::Task], ::Task::ActiveRecord_Associations_CollectionProxy)).void }
  def tasks=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def self.danger(*args); end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.domain_score_colors(); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def self.primary(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def self.success(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def self.warning(*args); end

end

module Domain::ModelRelationShared
  extend T::Sig

  sig { returns(Domain::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def assessment_domains_by_assessment_id(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def csi_domains(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def custom_csi_domains(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def danger(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def order_by_identity(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def primary(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def success(*args); end

  sig { params(args: T.untyped).returns(Domain::ActiveRecord_Relation) }
  def warning(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Domain::ActiveRecord_Relation) }
  def except(*args, &block); end

end
