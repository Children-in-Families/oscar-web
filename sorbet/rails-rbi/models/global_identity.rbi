# This is an autogenerated file for dynamic methods in GlobalIdentity
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class GlobalIdentity::ActiveRecord_Relation < ActiveRecord::Relation
  include GlobalIdentity::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: GlobalIdentity)
end

class GlobalIdentity::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include GlobalIdentity::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: GlobalIdentity)
end

class GlobalIdentity < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend GlobalIdentity::ModelRelationShared
  include GlobalIdentity::InstanceMethods
  Elem = type_template(fixed: GlobalIdentity)
end

module GlobalIdentity::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def ulid(); end

  sig { params(value: T.nilable(String)).void }
  def ulid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ulid?(*args); end

end

class GlobalIdentity
  extend T::Sig

  sig { returns(::Client::ActiveRecord_Associations_CollectionProxy) }
  def clients(); end

  sig { params(value: T.any(T::Array[::Client], ::Client::ActiveRecord_Associations_CollectionProxy)).void }
  def clients=(value); end

  sig { returns(::ExternalSystemGlobalIdentity::ActiveRecord_Associations_CollectionProxy) }
  def external_system_global_identities(); end

  sig { params(value: T.any(T::Array[::ExternalSystemGlobalIdentity], ::ExternalSystemGlobalIdentity::ActiveRecord_Associations_CollectionProxy)).void }
  def external_system_global_identities=(value); end

  sig { returns(::GlobalIdentityOrganization::ActiveRecord_Associations_CollectionProxy) }
  def global_identity_organizations(); end

  sig { params(value: T.any(T::Array[::GlobalIdentityOrganization], ::GlobalIdentityOrganization::ActiveRecord_Associations_CollectionProxy)).void }
  def global_identity_organizations=(value); end

  sig { returns(::Organization::ActiveRecord_Associations_CollectionProxy) }
  def organizations(); end

  sig { params(value: T.any(T::Array[::Organization], ::Organization::ActiveRecord_Associations_CollectionProxy)).void }
  def organizations=(value); end

end

module GlobalIdentity::ModelRelationShared
  extend T::Sig

  sig { returns(GlobalIdentity::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GlobalIdentity::ActiveRecord_Relation) }
  def except(*args, &block); end

end
