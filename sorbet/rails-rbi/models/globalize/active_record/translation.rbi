# This is an autogenerated file for dynamic methods in Globalize::ActiveRecord::Translation
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Globalize::ActiveRecord::Translation::ActiveRecord_Relation < ActiveRecord::Relation
  include Globalize::ActiveRecord::Translation::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Globalize::ActiveRecord::Translation)
end

class Globalize::ActiveRecord::Translation::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Globalize::ActiveRecord::Translation::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Globalize::ActiveRecord::Translation)
end

class Globalize::ActiveRecord::Translation < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Globalize::ActiveRecord::Translation::ModelRelationShared
  include Globalize::ActiveRecord::Translation::InstanceMethods
  Elem = type_template(fixed: Globalize::ActiveRecord::Translation)
end

module Globalize::ActiveRecord::Translation::InstanceMethods
  extend T::Sig

end

class Globalize::ActiveRecord::Translation
  extend T::Sig

end

module Globalize::ActiveRecord::Translation::ModelRelationShared
  extend T::Sig

  sig { returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Globalize::ActiveRecord::Translation::ActiveRecord_Relation) }
  def except(*args, &block); end

end
