# This is an autogenerated file for dynamic methods in Doorkeeper::Application
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Doorkeeper::Application::ActiveRecord_Relation < ActiveRecord::Relation
  include Doorkeeper::Application::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Doorkeeper::Application)
end

class Doorkeeper::Application::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Doorkeeper::Application::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Doorkeeper::Application)
end

class Doorkeeper::Application < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Doorkeeper::Application::ModelRelationShared
  include Doorkeeper::Application::InstanceMethods
  Elem = type_template(fixed: Doorkeeper::Application)
end

module Doorkeeper::Application::InstanceMethods
  extend T::Sig

  sig { returns(T::Boolean) }
  def confidential(); end

  sig { params(value: T::Boolean).void }
  def confidential=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def confidential?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(String) }
  def redirect_uri(); end

  sig { params(value: String).void }
  def redirect_uri=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def redirect_uri?(*args); end

  sig { returns(String) }
  def scopes(); end

  sig { params(value: String).void }
  def scopes=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def scopes?(*args); end

  sig { returns(String) }
  def secret(); end

  sig { params(value: String).void }
  def secret=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def secret?(*args); end

  sig { returns(String) }
  def uid(); end

  sig { params(value: String).void }
  def uid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def uid?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Doorkeeper::Application
  extend T::Sig

  sig { returns(::Doorkeeper::AccessGrant::ActiveRecord_Associations_CollectionProxy) }
  def access_grants(); end

  sig { params(value: T.any(T::Array[::Doorkeeper::AccessGrant], ::Doorkeeper::AccessGrant::ActiveRecord_Associations_CollectionProxy)).void }
  def access_grants=(value); end

  sig { returns(::Doorkeeper::AccessToken::ActiveRecord_Associations_CollectionProxy) }
  def access_tokens(); end

  sig { params(value: T.any(T::Array[::Doorkeeper::AccessToken], ::Doorkeeper::AccessToken::ActiveRecord_Associations_CollectionProxy)).void }
  def access_tokens=(value); end

  sig { returns(::Doorkeeper::Application::ActiveRecord_Associations_CollectionProxy) }
  def authorized_applications(); end

  sig { params(value: T.any(T::Array[::Doorkeeper::Application], ::Doorkeeper::Application::ActiveRecord_Associations_CollectionProxy)).void }
  def authorized_applications=(value); end

  sig { returns(::Doorkeeper::AccessToken::ActiveRecord_Associations_CollectionProxy) }
  def authorized_tokens(); end

  sig { params(value: T.any(T::Array[::Doorkeeper::AccessToken], ::Doorkeeper::AccessToken::ActiveRecord_Associations_CollectionProxy)).void }
  def authorized_tokens=(value); end

end

module Doorkeeper::Application::ModelRelationShared
  extend T::Sig

  sig { returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Doorkeeper::Application::ActiveRecord_Relation) }
  def except(*args, &block); end

end
