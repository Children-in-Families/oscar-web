# This is an autogenerated file for dynamic methods in Survey
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Survey::ActiveRecord_Relation < ActiveRecord::Relation
  include Survey::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Survey)
end

class Survey::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Survey::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Survey)
end

class Survey < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Survey::ModelRelationShared
  include Survey::InstanceMethods
  Elem = type_template(fixed: Survey)
end

module Survey::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Integer)) }
  def care_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def care_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def care_score?(*args); end

  sig { returns(T.nilable(Integer)) }
  def client_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def client_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def difficulty_help_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def difficulty_help_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def difficulty_help_score?(*args); end

  sig { returns(T.nilable(Integer)) }
  def family_need_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def family_need_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def family_need_score?(*args); end

  sig { returns(T.nilable(Integer)) }
  def getting_in_touch_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def getting_in_touch_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def getting_in_touch_score?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def listening_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def listening_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def listening_score?(*args); end

  sig { returns(T.nilable(Integer)) }
  def problem_solving_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def problem_solving_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def problem_solving_score?(*args); end

  sig { returns(T.nilable(Integer)) }
  def support_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def support_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def support_score?(*args); end

  sig { returns(T.nilable(Integer)) }
  def trust_score(); end

  sig { params(value: T.nilable(Integer)).void }
  def trust_score=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def trust_score?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Survey
  extend T::Sig

  sig { returns(T.nilable(::Client)) }
  def client(); end

  sig { params(value: T.nilable(::Client)).void }
  def client=(value); end

end

module Survey::ModelRelationShared
  extend T::Sig

  sig { returns(Survey::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Survey::ActiveRecord_Relation) }
  def except(*args, &block); end

end
