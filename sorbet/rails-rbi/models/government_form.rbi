# This is an autogenerated file for dynamic methods in GovernmentForm
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class GovernmentForm::ActiveRecord_Relation < ActiveRecord::Relation
  include GovernmentForm::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: GovernmentForm)
end

class GovernmentForm::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include GovernmentForm::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: GovernmentForm)
end

class GovernmentForm < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend GovernmentForm::ModelRelationShared
  include GovernmentForm::InstanceMethods
  Elem = type_template(fixed: GovernmentForm)
end

module GovernmentForm::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Integer)) }
  def assessment_commune_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def assessment_commune_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assessment_commune_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def assessment_district_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def assessment_district_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assessment_district_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def assessment_province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def assessment_province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assessment_province_id?(*args); end

  sig { returns(T.nilable(Date)) }
  def assumption_date(); end

  sig { params(value: T.nilable(Date)).void }
  def assumption_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assumption_date?(*args); end

  sig { returns(T.nilable(String)) }
  def assumption_description(); end

  sig { params(value: T.nilable(String)).void }
  def assumption_description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assumption_description?(*args); end

  sig { returns(T.nilable(String)) }
  def brief_case_history(); end

  sig { params(value: T.nilable(String)).void }
  def brief_case_history=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def brief_case_history?(*args); end

  sig { returns(T.nilable(String)) }
  def care_type(); end

  sig { params(value: T.nilable(String)).void }
  def care_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def care_type?(*args); end

  sig { returns(T.nilable(String)) }
  def carer_contact_info(); end

  sig { params(value: T.nilable(String)).void }
  def carer_contact_info=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def carer_contact_info?(*args); end

  sig { returns(T.nilable(Integer)) }
  def case_closure_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def case_closure_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_closure_id?(*args); end

  sig { returns(T.nilable(String)) }
  def case_worker_comment(); end

  sig { params(value: T.nilable(String)).void }
  def case_worker_comment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_worker_comment?(*args); end

  sig { returns(T.nilable(Integer)) }
  def case_worker_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def case_worker_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_worker_id?(*args); end

  sig { returns(T.nilable(String)) }
  def case_worker_phone(); end

  sig { params(value: T.nilable(String)).void }
  def case_worker_phone=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_worker_phone?(*args); end

  sig { returns(T.nilable(String)) }
  def caseworker_assumption(); end

  sig { params(value: T.nilable(String)).void }
  def caseworker_assumption=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def caseworker_assumption?(*args); end

  sig { returns(T.nilable(String)) }
  def client_code(); end

  sig { params(value: T.nilable(String)).void }
  def client_code=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_code?(*args); end

  sig { returns(T.nilable(String)) }
  def client_decision(); end

  sig { params(value: T.nilable(String)).void }
  def client_decision=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_decision?(*args); end

  sig { returns(T.nilable(Integer)) }
  def client_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def client_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def commune_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def commune_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def commune_id?(*args); end

  sig { returns(T.nilable(String)) }
  def contact_type(); end

  sig { params(value: T.nilable(String)).void }
  def contact_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def contact_type?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Date)) }
  def date(); end

  sig { params(value: T.nilable(Date)).void }
  def date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date?(*args); end

  sig { returns(T.nilable(Integer)) }
  def district_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def district_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def district_id?(*args); end

  sig { returns(T.nilable(Date)) }
  def gov_placement_date(); end

  sig { params(value: T.nilable(Date)).void }
  def gov_placement_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gov_placement_date?(*args); end

  sig { returns(T.nilable(String)) }
  def guardian_comment(); end

  sig { params(value: T.nilable(String)).void }
  def guardian_comment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def guardian_comment?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def interview_commune_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def interview_commune_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def interview_commune_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def interview_district_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def interview_district_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def interview_district_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def interview_province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def interview_province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def interview_province_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def interview_village_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def interview_village_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def interview_village_id?(*args); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(String)) }
  def new_carer(); end

  sig { params(value: T.nilable(String)).void }
  def new_carer=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def new_carer?(*args); end

  sig { returns(T.nilable(Date)) }
  def new_carer_date_of_birth(); end

  sig { params(value: T.nilable(Date)).void }
  def new_carer_date_of_birth=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def new_carer_date_of_birth?(*args); end

  sig { returns(T.nilable(String)) }
  def new_carer_gender(); end

  sig { params(value: T.nilable(String)).void }
  def new_carer_gender=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def new_carer_gender?(*args); end

  sig { returns(T.nilable(String)) }
  def new_carer_relationship(); end

  sig { params(value: T.nilable(String)).void }
  def new_carer_relationship=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def new_carer_relationship?(*args); end

  sig { returns(T.nilable(String)) }
  def other_case_closure(); end

  sig { params(value: T.nilable(String)).void }
  def other_case_closure=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_case_closure?(*args); end

  sig { returns(T.nilable(String)) }
  def other_client_type(); end

  sig { params(value: T.nilable(String)).void }
  def other_client_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_client_type?(*args); end

  sig { returns(T.nilable(String)) }
  def other_interviewee(); end

  sig { params(value: T.nilable(String)).void }
  def other_interviewee=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_interviewee?(*args); end

  sig { returns(T.nilable(String)) }
  def other_need(); end

  sig { params(value: T.nilable(String)).void }
  def other_need=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_need?(*args); end

  sig { returns(T.nilable(String)) }
  def other_problem(); end

  sig { params(value: T.nilable(String)).void }
  def other_problem=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_problem?(*args); end

  sig { returns(T.nilable(String)) }
  def other_service_type(); end

  sig { params(value: T.nilable(String)).void }
  def other_service_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_service_type?(*args); end

  sig { returns(T.nilable(String)) }
  def primary_carer(); end

  sig { params(value: T.nilable(String)).void }
  def primary_carer=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer?(*args); end

  sig { returns(T.nilable(Integer)) }
  def primary_carer_commune_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def primary_carer_commune_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_commune_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def primary_carer_district_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def primary_carer_district_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_district_id?(*args); end

  sig { returns(T.nilable(String)) }
  def primary_carer_house(); end

  sig { params(value: T.nilable(String)).void }
  def primary_carer_house=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_house?(*args); end

  sig { returns(T.nilable(Integer)) }
  def primary_carer_province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def primary_carer_province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_province_id?(*args); end

  sig { returns(T.nilable(String)) }
  def primary_carer_relationship(); end

  sig { params(value: T.nilable(String)).void }
  def primary_carer_relationship=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_relationship?(*args); end

  sig { returns(T.nilable(String)) }
  def primary_carer_street(); end

  sig { params(value: T.nilable(String)).void }
  def primary_carer_street=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_street?(*args); end

  sig { returns(T.nilable(Integer)) }
  def primary_carer_village_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def primary_carer_village_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_carer_village_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def province_id?(*args); end

  sig { returns(T.nilable(String)) }
  def recent_issues_and_progress(); end

  sig { params(value: T.nilable(String)).void }
  def recent_issues_and_progress=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def recent_issues_and_progress?(*args); end

  sig { returns(T.nilable(String)) }
  def secondary_carer(); end

  sig { params(value: T.nilable(String)).void }
  def secondary_carer=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def secondary_carer?(*args); end

  sig { returns(T.nilable(String)) }
  def source_info(); end

  sig { params(value: T.nilable(String)).void }
  def source_info=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def source_info?(*args); end

  sig { returns(T.nilable(String)) }
  def summary_info_of_referral(); end

  sig { params(value: T.nilable(String)).void }
  def summary_info_of_referral=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def summary_info_of_referral?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def village_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def village_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def village_id?(*args); end

end

class GovernmentForm
  extend T::Sig

  sig { returns(::ActionResult::ActiveRecord_Associations_CollectionProxy) }
  def action_results(); end

  sig { params(value: T.any(T::Array[::ActionResult], ::ActionResult::ActiveRecord_Associations_CollectionProxy)).void }
  def action_results=(value); end

  sig { returns(T.nilable(::Commune)) }
  def assessment_commune(); end

  sig { params(value: T.nilable(::Commune)).void }
  def assessment_commune=(value); end

  sig { returns(T.nilable(::District)) }
  def assessment_district(); end

  sig { params(value: T.nilable(::District)).void }
  def assessment_district=(value); end

  sig { returns(T.nilable(::Province)) }
  def assessment_province(); end

  sig { params(value: T.nilable(::Province)).void }
  def assessment_province=(value); end

  sig { returns(T.nilable(::CaseClosure)) }
  def case_closure(); end

  sig { params(value: T.nilable(::CaseClosure)).void }
  def case_closure=(value); end

  sig { returns(::ChildrenPlan::ActiveRecord_Associations_CollectionProxy) }
  def children_plans(); end

  sig { params(value: T.any(T::Array[::ChildrenPlan], ::ChildrenPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def children_plans=(value); end

  sig { returns(::ChildrenPlan::ActiveRecord_Associations_CollectionProxy) }
  def children_statuses(); end

  sig { params(value: T.any(T::Array[::ChildrenPlan], ::ChildrenPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def children_statuses=(value); end

  sig { returns(T.nilable(::Client)) }
  def client(); end

  sig { params(value: T.nilable(::Client)).void }
  def client=(value); end

  sig { returns(::ClientRightGovernmentForm::ActiveRecord_Associations_CollectionProxy) }
  def client_right_government_forms(); end

  sig { params(value: T.any(T::Array[::ClientRightGovernmentForm], ::ClientRightGovernmentForm::ActiveRecord_Associations_CollectionProxy)).void }
  def client_right_government_forms=(value); end

  sig { returns(::ClientRight::ActiveRecord_Associations_CollectionProxy) }
  def client_rights(); end

  sig { params(value: T.any(T::Array[::ClientRight], ::ClientRight::ActiveRecord_Associations_CollectionProxy)).void }
  def client_rights=(value); end

  sig { returns(::ClientTypeGovernmentForm::ActiveRecord_Associations_CollectionProxy) }
  def client_type_government_forms(); end

  sig { params(value: T.any(T::Array[::ClientTypeGovernmentForm], ::ClientTypeGovernmentForm::ActiveRecord_Associations_CollectionProxy)).void }
  def client_type_government_forms=(value); end

  sig { returns(::ClientType::ActiveRecord_Associations_CollectionProxy) }
  def client_types(); end

  sig { params(value: T.any(T::Array[::ClientType], ::ClientType::ActiveRecord_Associations_CollectionProxy)).void }
  def client_types=(value); end

  sig { returns(T.nilable(::Commune)) }
  def commune(); end

  sig { params(value: T.nilable(::Commune)).void }
  def commune=(value); end

  sig { returns(T.nilable(::District)) }
  def district(); end

  sig { params(value: T.nilable(::District)).void }
  def district=(value); end

  sig { returns(::FamilyPlan::ActiveRecord_Associations_CollectionProxy) }
  def family_plans(); end

  sig { params(value: T.any(T::Array[::FamilyPlan], ::FamilyPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def family_plans=(value); end

  sig { returns(::FamilyPlan::ActiveRecord_Associations_CollectionProxy) }
  def family_statuses(); end

  sig { params(value: T.any(T::Array[::FamilyPlan], ::FamilyPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def family_statuses=(value); end

  sig { returns(::GovernmentFormChildrenPlan::ActiveRecord_Associations_CollectionProxy) }
  def government_form_children_plans(); end

  sig { params(value: T.any(T::Array[::GovernmentFormChildrenPlan], ::GovernmentFormChildrenPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def government_form_children_plans=(value); end

  sig { returns(::GovernmentFormFamilyPlan::ActiveRecord_Associations_CollectionProxy) }
  def government_form_family_plans(); end

  sig { params(value: T.any(T::Array[::GovernmentFormFamilyPlan], ::GovernmentFormFamilyPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def government_form_family_plans=(value); end

  sig { returns(::GovernmentFormInterviewee::ActiveRecord_Associations_CollectionProxy) }
  def government_form_interviewees(); end

  sig { params(value: T.any(T::Array[::GovernmentFormInterviewee], ::GovernmentFormInterviewee::ActiveRecord_Associations_CollectionProxy)).void }
  def government_form_interviewees=(value); end

  sig { returns(::GovernmentFormNeed::ActiveRecord_Associations_CollectionProxy) }
  def government_form_needs(); end

  sig { params(value: T.any(T::Array[::GovernmentFormNeed], ::GovernmentFormNeed::ActiveRecord_Associations_CollectionProxy)).void }
  def government_form_needs=(value); end

  sig { returns(::GovernmentFormProblem::ActiveRecord_Associations_CollectionProxy) }
  def government_form_problems(); end

  sig { params(value: T.any(T::Array[::GovernmentFormProblem], ::GovernmentFormProblem::ActiveRecord_Associations_CollectionProxy)).void }
  def government_form_problems=(value); end

  sig { returns(::GovernmentFormServiceType::ActiveRecord_Associations_CollectionProxy) }
  def government_form_service_types(); end

  sig { params(value: T.any(T::Array[::GovernmentFormServiceType], ::GovernmentFormServiceType::ActiveRecord_Associations_CollectionProxy)).void }
  def government_form_service_types=(value); end

  sig { returns(T.nilable(::Commune)) }
  def interview_commune(); end

  sig { params(value: T.nilable(::Commune)).void }
  def interview_commune=(value); end

  sig { returns(T.nilable(::District)) }
  def interview_district(); end

  sig { params(value: T.nilable(::District)).void }
  def interview_district=(value); end

  sig { returns(T.nilable(::Province)) }
  def interview_province(); end

  sig { params(value: T.nilable(::Province)).void }
  def interview_province=(value); end

  sig { returns(T.nilable(::Village)) }
  def interview_village(); end

  sig { params(value: T.nilable(::Village)).void }
  def interview_village=(value); end

  sig { returns(::Interviewee::ActiveRecord_Associations_CollectionProxy) }
  def interviewees(); end

  sig { params(value: T.any(T::Array[::Interviewee], ::Interviewee::ActiveRecord_Associations_CollectionProxy)).void }
  def interviewees=(value); end

  sig { returns(::Need::ActiveRecord_Associations_CollectionProxy) }
  def needs(); end

  sig { params(value: T.any(T::Array[::Need], ::Need::ActiveRecord_Associations_CollectionProxy)).void }
  def needs=(value); end

  sig { returns(T.nilable(::Commune)) }
  def primary_carer_commune(); end

  sig { params(value: T.nilable(::Commune)).void }
  def primary_carer_commune=(value); end

  sig { returns(T.nilable(::District)) }
  def primary_carer_district(); end

  sig { params(value: T.nilable(::District)).void }
  def primary_carer_district=(value); end

  sig { returns(T.nilable(::Province)) }
  def primary_carer_province(); end

  sig { params(value: T.nilable(::Province)).void }
  def primary_carer_province=(value); end

  sig { returns(T.nilable(::Village)) }
  def primary_carer_village(); end

  sig { params(value: T.nilable(::Village)).void }
  def primary_carer_village=(value); end

  sig { returns(::Problem::ActiveRecord_Associations_CollectionProxy) }
  def problems(); end

  sig { params(value: T.any(T::Array[::Problem], ::Problem::ActiveRecord_Associations_CollectionProxy)).void }
  def problems=(value); end

  sig { returns(T.nilable(::Province)) }
  def province(); end

  sig { params(value: T.nilable(::Province)).void }
  def province=(value); end

  sig { returns(::ServiceType::ActiveRecord_Associations_CollectionProxy) }
  def service_types(); end

  sig { params(value: T.any(T::Array[::ServiceType], ::ServiceType::ActiveRecord_Associations_CollectionProxy)).void }
  def service_types=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

  sig { returns(T.nilable(::Village)) }
  def village(); end

  sig { params(value: T.nilable(::Village)).void }
  def village=(value); end

end

module GovernmentForm::ModelRelationShared
  extend T::Sig

  sig { returns(GovernmentForm::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GovernmentForm::ActiveRecord_Relation) }
  def except(*args, &block); end

end
