# This is an autogenerated file for dynamic methods in Call
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Call::ActiveRecord_Relation < ActiveRecord::Relation
  include Call::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Call)
end

class Call::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Call::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Call)
end

class Call < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Call::ModelRelationShared
  include Call::InstanceMethods
  Elem = type_template(fixed: Call)
end

module Call::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T::Boolean)) }
  def answered_call(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def answered_call=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def answered_call?(*args); end

  sig { returns(T.nilable(String)) }
  def brief_note_summary(); end

  sig { params(value: T.nilable(String)).void }
  def brief_note_summary=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def brief_note_summary?(*args); end

  sig { returns(T.nilable(String)) }
  def call_type(); end

  sig { params(value: T.nilable(String)).void }
  def call_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def call_type?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def called_before(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def called_before=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def called_before?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def childsafe_agent(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def childsafe_agent=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def childsafe_agent?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Date)) }
  def date_of_call(); end

  sig { params(value: T.nilable(Date)).void }
  def date_of_call=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date_of_call?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def information_provided(); end

  sig { params(value: T.nilable(String)).void }
  def information_provided=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def information_provided?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def not_a_phone_call(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def not_a_phone_call=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def not_a_phone_call?(*args); end

  sig { returns(T.nilable(String)) }
  def other_more_information(); end

  sig { params(value: T.nilable(String)).void }
  def other_more_information=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def other_more_information?(*args); end

  sig { returns(T.nilable(String)) }
  def phone_call_id(); end

  sig { params(value: T.nilable(String)).void }
  def phone_call_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def phone_call_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def receiving_staff_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def receiving_staff_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def receiving_staff_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def referee_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def referee_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def referee_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def requested_update(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def requested_update=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def requested_update?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def start_datetime(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def start_datetime=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def start_datetime?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Call
  extend T::Sig

  sig { returns(::CallNecessity::ActiveRecord_Associations_CollectionProxy) }
  def call_necessities(); end

  sig { params(value: T.any(T::Array[::CallNecessity], ::CallNecessity::ActiveRecord_Associations_CollectionProxy)).void }
  def call_necessities=(value); end

  sig { returns(::CallProtectionConcern::ActiveRecord_Associations_CollectionProxy) }
  def call_protection_concerns(); end

  sig { params(value: T.any(T::Array[::CallProtectionConcern], ::CallProtectionConcern::ActiveRecord_Associations_CollectionProxy)).void }
  def call_protection_concerns=(value); end

  sig { returns(::Client::ActiveRecord_Associations_CollectionProxy) }
  def clients(); end

  sig { params(value: T.any(T::Array[::Client], ::Client::ActiveRecord_Associations_CollectionProxy)).void }
  def clients=(value); end

  sig { returns(::Hotline::ActiveRecord_Associations_CollectionProxy) }
  def hotlines(); end

  sig { params(value: T.any(T::Array[::Hotline], ::Hotline::ActiveRecord_Associations_CollectionProxy)).void }
  def hotlines=(value); end

  sig { returns(::Necessity::ActiveRecord_Associations_CollectionProxy) }
  def necessities(); end

  sig { params(value: T.any(T::Array[::Necessity], ::Necessity::ActiveRecord_Associations_CollectionProxy)).void }
  def necessities=(value); end

  sig { returns(::ProtectionConcern::ActiveRecord_Associations_CollectionProxy) }
  def protection_concerns(); end

  sig { params(value: T.any(T::Array[::ProtectionConcern], ::ProtectionConcern::ActiveRecord_Associations_CollectionProxy)).void }
  def protection_concerns=(value); end

  sig { returns(T.nilable(::User)) }
  def receiving_staff(); end

  sig { params(value: T.nilable(::User)).void }
  def receiving_staff=(value); end

  sig { returns(T.nilable(::Referee)) }
  def referee(); end

  sig { params(value: T.nilable(::Referee)).void }
  def referee=(value); end

end

module Call::ModelRelationShared
  extend T::Sig

  sig { returns(Call::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Call::ActiveRecord_Relation) }
  def most_recents(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Call::ActiveRecord_Relation) }
  def except(*args, &block); end

end
