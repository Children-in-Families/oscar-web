# This is an autogenerated file for dynamic methods in Setting
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Setting::ActiveRecord_Relation < ActiveRecord::Relation
  include Setting::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Setting)
end

class Setting::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Setting::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Setting)
end

class Setting < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Setting::ModelRelationShared
  include Setting::InstanceMethods
  Elem = type_template(fixed: Setting)
end

module Setting::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(Integer)) }
  def age(); end

  sig { params(value: T.nilable(Integer)).void }
  def age=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def age?(*args); end

  sig { returns(T.nilable(String)) }
  def assessment_frequency(); end

  sig { params(value: T.nilable(String)).void }
  def assessment_frequency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assessment_frequency?(*args); end

  sig { returns(T.untyped) }
  def assessment_score_order(); end

  sig { params(value: T.untyped).void }
  def assessment_score_order=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def assessment_score_order?(*args); end

  sig { returns(T.nilable(String)) }
  def case_note_frequency(); end

  sig { params(value: T.nilable(String)).void }
  def case_note_frequency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_note_frequency?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def client_default_columns(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def client_default_columns=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_default_columns?(*args); end

  sig { returns(T.nilable(Integer)) }
  def commune_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def commune_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def commune_id?(*args); end

  sig { returns(T.nilable(String)) }
  def country_name(); end

  sig { params(value: T.nilable(String)).void }
  def country_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def country_name?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def custom_age(); end

  sig { params(value: T.nilable(Integer)).void }
  def custom_age=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_age?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_assessment(); end

  sig { params(value: T.nilable(String)).void }
  def custom_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_assessment?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_assessment_frequency(); end

  sig { params(value: T.nilable(String)).void }
  def custom_assessment_frequency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_assessment_frequency?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_id1_latin(); end

  sig { params(value: T.nilable(String)).void }
  def custom_id1_latin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_id1_latin?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_id1_local(); end

  sig { params(value: T.nilable(String)).void }
  def custom_id1_local=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_id1_local?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_id2_latin(); end

  sig { params(value: T.nilable(String)).void }
  def custom_id2_latin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_id2_latin?(*args); end

  sig { returns(T.nilable(String)) }
  def custom_id2_local(); end

  sig { params(value: T.nilable(String)).void }
  def custom_id2_local=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def custom_id2_local?(*args); end

  sig { returns(T.nilable(String)) }
  def default_assessment(); end

  sig { params(value: T.nilable(String)).void }
  def default_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def default_assessment?(*args); end

  sig { returns(T.nilable(String)) }
  def delete_incomplete_after_period_unit(); end

  sig { params(value: T.nilable(String)).void }
  def delete_incomplete_after_period_unit=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def delete_incomplete_after_period_unit?(*args); end

  sig { returns(T.nilable(Integer)) }
  def delete_incomplete_after_period_value(); end

  sig { params(value: T.nilable(Integer)).void }
  def delete_incomplete_after_period_value=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def delete_incomplete_after_period_value?(*args); end

  sig { returns(T::Boolean) }
  def disable_required_fields(); end

  sig { params(value: T::Boolean).void }
  def disable_required_fields=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def disable_required_fields?(*args); end

  sig { returns(T.nilable(Integer)) }
  def district_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def district_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def district_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_client_form(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_client_form=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_client_form?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_custom_assessment(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_custom_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_custom_assessment?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_default_assessment(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_default_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_default_assessment?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def enable_hotline(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def enable_hotline=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enable_hotline?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def family_default_columns(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def family_default_columns=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def family_default_columns?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def max_assessment(); end

  sig { params(value: T.nilable(Integer)).void }
  def max_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def max_assessment?(*args); end

  sig { returns(T.nilable(Integer)) }
  def max_case_note(); end

  sig { params(value: T.nilable(Integer)).void }
  def max_case_note=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def max_case_note?(*args); end

  sig { returns(T.nilable(Integer)) }
  def max_custom_assessment(); end

  sig { params(value: T.nilable(Integer)).void }
  def max_custom_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def max_custom_assessment?(*args); end

  sig { returns(T.nilable(Integer)) }
  def min_assessment(); end

  sig { params(value: T.nilable(Integer)).void }
  def min_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def min_assessment?(*args); end

  sig { returns(T::Boolean) }
  def never_delete_incomplete_assessment(); end

  sig { params(value: T::Boolean).void }
  def never_delete_incomplete_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def never_delete_incomplete_assessment?(*args); end

  sig { returns(T.nilable(String)) }
  def old_commune(); end

  sig { params(value: T.nilable(String)).void }
  def old_commune=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def old_commune?(*args); end

  sig { returns(T.nilable(String)) }
  def org_name(); end

  sig { params(value: T.nilable(String)).void }
  def org_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def org_name?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def partner_default_columns(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def partner_default_columns=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def partner_default_columns?(*args); end

  sig { returns(T.nilable(Integer)) }
  def province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def province_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def screening_assessment_form_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def screening_assessment_form_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def screening_assessment_form_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def sharing_data(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def sharing_data=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sharing_data?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def show_prev_assessment(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def show_prev_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def show_prev_assessment?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def two_weeks_assessment_reminder(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def two_weeks_assessment_reminder=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def two_weeks_assessment_reminder?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def use_screening_assessment(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def use_screening_assessment=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def use_screening_assessment?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def user_default_columns(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def user_default_columns=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_default_columns?(*args); end

end

class Setting
  extend T::Sig

  sig { returns(T.nilable(::Commune)) }
  def commune(); end

  sig { params(value: T.nilable(::Commune)).void }
  def commune=(value); end

  sig { returns(::CustomAssessmentSetting::ActiveRecord_Associations_CollectionProxy) }
  def custom_assessment_settings(); end

  sig { params(value: T.any(T::Array[::CustomAssessmentSetting], ::CustomAssessmentSetting::ActiveRecord_Associations_CollectionProxy)).void }
  def custom_assessment_settings=(value); end

  sig { returns(T.nilable(::District)) }
  def district(); end

  sig { params(value: T.nilable(::District)).void }
  def district=(value); end

  sig { returns(T.nilable(::Province)) }
  def province(); end

  sig { params(value: T.nilable(::Province)).void }
  def province=(value); end

  sig { returns(T.nilable(::CustomField)) }
  def screening_assessment_form(); end

  sig { params(value: T.nilable(::CustomField)).void }
  def screening_assessment_form=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module Setting::ModelRelationShared
  extend T::Sig

  sig { returns(Setting::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Setting::ActiveRecord_Relation) }
  def except(*args, &block); end

end
