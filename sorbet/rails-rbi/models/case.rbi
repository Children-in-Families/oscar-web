# This is an autogenerated file for dynamic methods in Case
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Case::ActiveRecord_Relation < ActiveRecord::Relation
  include Case::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Case)
end

class Case::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Case::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Case)
end

class Case < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Case::ModelRelationShared
  include Case::InstanceMethods
  Elem = type_template(fixed: Case)
end

module Case::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def carer_address(); end

  sig { params(value: T.nilable(String)).void }
  def carer_address=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def carer_address?(*args); end

  sig { returns(T.nilable(String)) }
  def carer_names(); end

  sig { params(value: T.nilable(String)).void }
  def carer_names=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def carer_names?(*args); end

  sig { returns(T.nilable(String)) }
  def carer_phone_number(); end

  sig { params(value: T.nilable(String)).void }
  def carer_phone_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def carer_phone_number?(*args); end

  sig { returns(T.nilable(Date)) }
  def case_conference_date(); end

  sig { params(value: T.nilable(Date)).void }
  def case_conference_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_conference_date?(*args); end

  sig { returns(T.nilable(Float)) }
  def case_length(); end

  sig { params(value: T.nilable(Float)).void }
  def case_length=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_length?(*args); end

  sig { returns(T.nilable(String)) }
  def case_type(); end

  sig { params(value: T.nilable(String)).void }
  def case_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def case_type?(*args); end

  sig { returns(T.nilable(Integer)) }
  def client_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def client_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def created_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def current(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def current=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def current?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def deleted_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def deleted_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def deleted_at?(*args); end

  sig { returns(T.nilable(Date)) }
  def exit_date(); end

  sig { params(value: T.nilable(Date)).void }
  def exit_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def exit_date?(*args); end

  sig { returns(T.nilable(String)) }
  def exit_note(); end

  sig { params(value: T.nilable(String)).void }
  def exit_note=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def exit_note?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def exited(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def exited=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def exited?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def exited_from_cif(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def exited_from_cif=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def exited_from_cif?(*args); end

  sig { returns(T.nilable(Integer)) }
  def family_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def family_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def family_id?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def family_preservation(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def family_preservation=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def family_preservation?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Date)) }
  def initial_assessment_date(); end

  sig { params(value: T.nilable(Date)).void }
  def initial_assessment_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def initial_assessment_date?(*args); end

  sig { returns(T.nilable(Integer)) }
  def partner_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def partner_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def partner_id?(*args); end

  sig { returns(T.nilable(Date)) }
  def placement_date(); end

  sig { params(value: T.nilable(Date)).void }
  def placement_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def placement_date?(*args); end

  sig { returns(T.nilable(Integer)) }
  def province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def province_id?(*args); end

  sig { returns(T.nilable(Date)) }
  def start_date(); end

  sig { params(value: T.nilable(Date)).void }
  def start_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def start_date?(*args); end

  sig { returns(T.nilable(String)) }
  def status(); end

  sig { params(value: T.nilable(String)).void }
  def status=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def status?(*args); end

  sig { returns(T.nilable(Float)) }
  def support_amount(); end

  sig { params(value: T.nilable(Float)).void }
  def support_amount=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def support_amount?(*args); end

  sig { returns(T.nilable(String)) }
  def support_note(); end

  sig { params(value: T.nilable(String)).void }
  def support_note=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def support_note?(*args); end

  sig { returns(T.nilable(Float)) }
  def time_in_care(); end

  sig { params(value: T.nilable(Float)).void }
  def time_in_care=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def time_in_care?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def updated_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Case
  extend T::Sig

  sig { returns(::CaseContract::ActiveRecord_Associations_CollectionProxy) }
  def case_contracts(); end

  sig { params(value: T.any(T::Array[::CaseContract], ::CaseContract::ActiveRecord_Associations_CollectionProxy)).void }
  def case_contracts=(value); end

  sig { returns(T.nilable(::Client)) }
  def client(); end

  sig { params(value: T.nilable(::Client)).void }
  def client=(value); end

  sig { returns(T.nilable(::Family)) }
  def family(); end

  sig { params(value: T.nilable(::Family)).void }
  def family=(value); end

  sig { returns(T.nilable(::Partner)) }
  def partner(); end

  sig { params(value: T.nilable(::Partner)).void }
  def partner=(value); end

  sig { returns(T.nilable(::Province)) }
  def province(); end

  sig { params(value: T.nilable(::Province)).void }
  def province=(value); end

  sig { returns(::QuarterlyReport::ActiveRecord_Associations_CollectionProxy) }
  def quarterly_reports(); end

  sig { params(value: T.any(T::Array[::QuarterlyReport], ::QuarterlyReport::ActiveRecord_Associations_CollectionProxy)).void }
  def quarterly_reports=(value); end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions(); end

  sig { params(value: T.any(T::Array[::PaperTrail::Version], ::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy)).void }
  def versions=(value); end

end

module Case::ModelRelationShared
  extend T::Sig

  sig { returns(Case::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def case_types(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def currents(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def deleted_after_time(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def deleted_before_time(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def deleted_inside_time_window(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def emergencies(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def exclude_referred(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def fosters(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def inactive(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def kinships(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def last_exited(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def most_recents(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def non_emergency(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def with_contracts(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def with_reports(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def except(*args, &block); end

end
