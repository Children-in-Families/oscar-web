# This is an autogenerated file for dynamic methods in Carer
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Carer::ActiveRecord_Relation < ActiveRecord::Relation
  include Carer::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Carer)
end

class Carer::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Carer::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Carer)
end

class Carer < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Carer::ModelRelationShared
  include Carer::InstanceMethods
  Elem = type_template(fixed: Carer)
end

module Carer::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def address_type(); end

  sig { params(value: T.nilable(String)).void }
  def address_type=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def address_type?(*args); end

  sig { returns(T.nilable(String)) }
  def client_relationship(); end

  sig { params(value: T.nilable(String)).void }
  def client_relationship=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def client_relationship?(*args); end

  sig { returns(T.nilable(Integer)) }
  def commune_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def commune_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def commune_id?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def current_address(); end

  sig { params(value: T.nilable(String)).void }
  def current_address=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def current_address?(*args); end

  sig { returns(T.nilable(String)) }
  def description_house_landmark(); end

  sig { params(value: T.nilable(String)).void }
  def description_house_landmark=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def description_house_landmark?(*args); end

  sig { returns(T.nilable(String)) }
  def directions(); end

  sig { params(value: T.nilable(String)).void }
  def directions=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def directions?(*args); end

  sig { returns(T.nilable(Integer)) }
  def district_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def district_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def district_id?(*args); end

  sig { returns(T.nilable(String)) }
  def email(); end

  sig { params(value: T.nilable(String)).void }
  def email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email?(*args); end

  sig { returns(T.nilable(String)) }
  def gender(); end

  sig { params(value: T.nilable(String)).void }
  def gender=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gender?(*args); end

  sig { returns(T.nilable(String)) }
  def house_number(); end

  sig { params(value: T.nilable(String)).void }
  def house_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def house_number?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def locality(); end

  sig { params(value: T.nilable(String)).void }
  def locality=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def locality?(*args); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def outside(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def outside=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def outside?(*args); end

  sig { returns(T.nilable(String)) }
  def outside_address(); end

  sig { params(value: T.nilable(String)).void }
  def outside_address=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def outside_address?(*args); end

  sig { returns(T.nilable(String)) }
  def phone(); end

  sig { params(value: T.nilable(String)).void }
  def phone=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def phone?(*args); end

  sig { returns(T.nilable(String)) }
  def plot(); end

  sig { params(value: T.nilable(String)).void }
  def plot=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def plot?(*args); end

  sig { returns(T.nilable(String)) }
  def postal_code(); end

  sig { params(value: T.nilable(String)).void }
  def postal_code=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def postal_code?(*args); end

  sig { returns(T.nilable(Integer)) }
  def province_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def province_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def province_id?(*args); end

  sig { returns(T.nilable(String)) }
  def road(); end

  sig { params(value: T.nilable(String)).void }
  def road=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def road?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def same_as_client(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def same_as_client=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def same_as_client?(*args); end

  sig { returns(T.nilable(Integer)) }
  def state_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def state_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def state_id?(*args); end

  sig { returns(T.nilable(String)) }
  def street_line1(); end

  sig { params(value: T.nilable(String)).void }
  def street_line1=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def street_line1?(*args); end

  sig { returns(T.nilable(String)) }
  def street_line2(); end

  sig { params(value: T.nilable(String)).void }
  def street_line2=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def street_line2?(*args); end

  sig { returns(T.nilable(String)) }
  def street_number(); end

  sig { params(value: T.nilable(String)).void }
  def street_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def street_number?(*args); end

  sig { returns(T.nilable(Integer)) }
  def subdistrict_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def subdistrict_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def subdistrict_id?(*args); end

  sig { returns(T.nilable(String)) }
  def suburb(); end

  sig { params(value: T.nilable(String)).void }
  def suburb=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def suburb?(*args); end

  sig { returns(T.nilable(Integer)) }
  def township_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def township_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def township_id?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def village_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def village_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def village_id?(*args); end

end

class Carer
  extend T::Sig

  sig { returns(::Client::ActiveRecord_Associations_CollectionProxy) }
  def clients(); end

  sig { params(value: T.any(T::Array[::Client], ::Client::ActiveRecord_Associations_CollectionProxy)).void }
  def clients=(value); end

  sig { returns(T.nilable(::Commune)) }
  def commune(); end

  sig { params(value: T.nilable(::Commune)).void }
  def commune=(value); end

  sig { returns(T.nilable(::District)) }
  def district(); end

  sig { params(value: T.nilable(::District)).void }
  def district=(value); end

  sig { returns(T.nilable(::Province)) }
  def province(); end

  sig { params(value: T.nilable(::Province)).void }
  def province=(value); end

  sig { returns(T.nilable(::State)) }
  def state(); end

  sig { params(value: T.nilable(::State)).void }
  def state=(value); end

  sig { returns(T.nilable(::Subdistrict)) }
  def subdistrict(); end

  sig { params(value: T.nilable(::Subdistrict)).void }
  def subdistrict=(value); end

  sig { returns(T.nilable(::Township)) }
  def township(); end

  sig { params(value: T.nilable(::Township)).void }
  def township=(value); end

  sig { returns(T.nilable(::Village)) }
  def village(); end

  sig { params(value: T.nilable(::Village)).void }
  def village=(value); end

end

module Carer::ModelRelationShared
  extend T::Sig

  sig { returns(Carer::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Carer::ActiveRecord_Relation) }
  def except(*args, &block); end

end
