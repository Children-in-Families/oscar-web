# This is an autogenerated file for dynamic methods in Thredded::UserTopicFollow
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Thredded::UserTopicFollow::ActiveRecord_Relation < ActiveRecord::Relation
  include Thredded::UserTopicFollow::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::UserTopicFollow)
end

class Thredded::UserTopicFollow::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Thredded::UserTopicFollow::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::UserTopicFollow)
end

class Thredded::UserTopicFollow < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Thredded::UserTopicFollow::ModelRelationShared
  include Thredded::UserTopicFollow::InstanceMethods
  Elem = type_template(fixed: Thredded::UserTopicFollow)
end

module Thredded::UserTopicFollow::InstanceMethods
  extend T::Sig

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { void }
  def manual!(); end

  sig { returns(T::Boolean) }
  def manual?(); end

  sig { void }
  def mentioned!(); end

  sig { returns(T::Boolean) }
  def mentioned?(); end

  sig { void }
  def posted!(); end

  sig { returns(T::Boolean) }
  def posted?(); end

  sig { returns(String) }
  def reason(); end

  sig { params(value: T.nilable(T.any(Integer, String, Symbol))).void }
  def reason=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def reason?(*args); end

  sig { returns(Integer) }
  def topic_id(); end

  sig { params(value: Integer).void }
  def topic_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def topic_id?(*args); end

  sig { returns(Integer) }
  def user_id(); end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Thredded::UserTopicFollow
  extend T::Sig

  sig { returns(::Thredded::Topic) }
  def topic(); end

  sig { params(value: ::Thredded::Topic).void }
  def topic=(value); end

  sig { returns(::User) }
  def user(); end

  sig { params(value: ::User).void }
  def user=(value); end

  sig { params(args: T.untyped).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def self.manual(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def self.mentioned(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def self.posted(*args); end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.reasons(); end

end

module Thredded::UserTopicFollow::ModelRelationShared
  extend T::Sig

  sig { returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def manual(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def mentioned(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def posted(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserTopicFollow::ActiveRecord_Relation) }
  def except(*args, &block); end

end
