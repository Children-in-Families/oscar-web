# This is an autogenerated file for dynamic methods in Thredded::UserPrivateTopicReadState
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Thredded::UserPrivateTopicReadState::ActiveRecord_Relation < ActiveRecord::Relation
  include Thredded::UserPrivateTopicReadState::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::UserPrivateTopicReadState)
end

class Thredded::UserPrivateTopicReadState::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Thredded::UserPrivateTopicReadState::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::UserPrivateTopicReadState)
end

class Thredded::UserPrivateTopicReadState < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Thredded::UserPrivateTopicReadState::ModelRelationShared
  include Thredded::UserPrivateTopicReadState::InstanceMethods
  Elem = type_template(fixed: Thredded::UserPrivateTopicReadState)
end

module Thredded::UserPrivateTopicReadState::InstanceMethods
  extend T::Sig

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(Integer) }
  def page(); end

  sig { params(value: Integer).void }
  def page=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def page?(*args); end

  sig { returns(Integer) }
  def postable_id(); end

  sig { params(value: Integer).void }
  def postable_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def postable_id?(*args); end

  sig { returns(T.untyped) }
  def read_at(); end

  sig { params(value: T.untyped).void }
  def read_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def read_at?(*args); end

  sig { returns(Integer) }
  def user_id(); end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Thredded::UserPrivateTopicReadState
  extend T::Sig

  sig { returns(::Thredded::PrivateTopic) }
  def postable(); end

  sig { params(value: ::Thredded::PrivateTopic).void }
  def postable=(value); end

  sig { returns(::User) }
  def user(); end

  sig { params(value: ::User).void }
  def user=(value); end

end

module Thredded::UserPrivateTopicReadState::ModelRelationShared
  extend T::Sig

  sig { returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserPrivateTopicReadState::ActiveRecord_Relation) }
  def except(*args, &block); end

end
