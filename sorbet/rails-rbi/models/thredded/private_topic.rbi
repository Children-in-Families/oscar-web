# This is an autogenerated file for dynamic methods in Thredded::PrivateTopic
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Thredded::PrivateTopic::ActiveRecord_Relation < ActiveRecord::Relation
  include Thredded::PrivateTopic::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::PrivateTopic)
end

class Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Thredded::PrivateTopic::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::PrivateTopic)
end

class Thredded::PrivateTopic < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Thredded::PrivateTopic::ModelRelationShared
  include Thredded::PrivateTopic::InstanceMethods
  Elem = type_template(fixed: Thredded::PrivateTopic)
end

module Thredded::PrivateTopic::InstanceMethods
  extend T::Sig

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(String) }
  def hash_id(); end

  sig { params(value: String).void }
  def hash_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def hash_id?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def last_user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def last_user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_user_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def posts_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def posts_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def posts_count?(*args); end

  sig { returns(String) }
  def slug(); end

  sig { params(value: String).void }
  def slug=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def slug?(*args); end

  sig { returns(String) }
  def title(); end

  sig { params(value: String).void }
  def title=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def title?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Thredded::PrivateTopic
  extend T::Sig

  sig { returns(T.nilable(::Thredded::PrivatePost)) }
  def first_post(); end

  sig { params(value: T.nilable(::Thredded::PrivatePost)).void }
  def first_post=(value); end

  sig { returns(T.nilable(::User)) }
  def last_user(); end

  sig { params(value: T.nilable(::User)).void }
  def last_user=(value); end

  sig { returns(::Thredded::PrivatePost::ActiveRecord_Associations_CollectionProxy) }
  def posts(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivatePost], ::Thredded::PrivatePost::ActiveRecord_Associations_CollectionProxy)).void }
  def posts=(value); end

  sig { returns(::Thredded::PrivateUser::ActiveRecord_Associations_CollectionProxy) }
  def private_users(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivateUser], ::Thredded::PrivateUser::ActiveRecord_Associations_CollectionProxy)).void }
  def private_users=(value); end

  sig { returns(::FriendlyId::Slug::ActiveRecord_Associations_CollectionProxy) }
  def slugs(); end

  sig { params(value: T.any(T::Array[::FriendlyId::Slug], ::FriendlyId::Slug::ActiveRecord_Associations_CollectionProxy)).void }
  def slugs=(value); end

  sig { returns(T.nilable(::User)) }
  def user(); end

  sig { params(value: T.nilable(::User)).void }
  def user=(value); end

  sig { returns(T.nilable(::Thredded::UserDetail)) }
  def user_detail(); end

  sig { params(value: T.nilable(::Thredded::UserDetail)).void }
  def user_detail=(value); end

  sig { returns(::Thredded::UserPrivateTopicReadState::ActiveRecord_Associations_CollectionProxy) }
  def user_read_states(); end

  sig { params(value: T.any(T::Array[::Thredded::UserPrivateTopicReadState], ::Thredded::UserPrivateTopicReadState::ActiveRecord_Associations_CollectionProxy)).void }
  def user_read_states=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def users(); end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def users=(value); end

end

module Thredded::PrivateTopic::ModelRelationShared
  extend T::Sig

  sig { returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def for_user(*args); end

  sig { params(args: T.untyped).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def on_page(*args); end

  sig { params(args: T.untyped).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def order_recently_updated_first(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PrivateTopic::ActiveRecord_Relation) }
  def except(*args, &block); end

end
