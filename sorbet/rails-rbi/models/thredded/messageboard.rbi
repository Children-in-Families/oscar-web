# This is an autogenerated file for dynamic methods in Thredded::Messageboard
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Thredded::Messageboard::ActiveRecord_Relation < ActiveRecord::Relation
  include Thredded::Messageboard::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::Messageboard)
end

class Thredded::Messageboard::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Thredded::Messageboard::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::Messageboard)
end

class Thredded::Messageboard < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Thredded::Messageboard::ModelRelationShared
  include Thredded::Messageboard::InstanceMethods
  Elem = type_template(fixed: Thredded::Messageboard)
end

module Thredded::Messageboard::InstanceMethods
  extend T::Sig

  sig { returns(T::Boolean) }
  def closed(); end

  sig { params(value: T::Boolean).void }
  def closed=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def closed?(*args); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def description(); end

  sig { params(value: T.nilable(String)).void }
  def description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def description?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def last_topic_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def last_topic_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_topic_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def messageboard_group_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def messageboard_group_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def messageboard_group_id?(*args); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(Integer)) }
  def posts_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def posts_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def posts_count?(*args); end

  sig { returns(T.nilable(String)) }
  def slug(); end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def slug?(*args); end

  sig { returns(T.nilable(Integer)) }
  def topics_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def topics_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def topics_count?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Thredded::Messageboard
  extend T::Sig

  sig { returns(::Thredded::Category::ActiveRecord_Associations_CollectionProxy) }
  def categories(); end

  sig { params(value: T.any(T::Array[::Thredded::Category], ::Thredded::Category::ActiveRecord_Associations_CollectionProxy)).void }
  def categories=(value); end

  sig { returns(T.nilable(::Thredded::MessageboardGroup)) }
  def group(); end

  sig { params(value: T.nilable(::Thredded::MessageboardGroup)).void }
  def group=(value); end

  sig { returns(T.nilable(::Thredded::Topic)) }
  def last_topic(); end

  sig { params(value: T.nilable(::Thredded::Topic)).void }
  def last_topic=(value); end

  sig { returns(::Thredded::MessageboardUser::ActiveRecord_Associations_CollectionProxy) }
  def messageboard_users(); end

  sig { params(value: T.any(T::Array[::Thredded::MessageboardUser], ::Thredded::MessageboardUser::ActiveRecord_Associations_CollectionProxy)).void }
  def messageboard_users=(value); end

  sig { returns(::Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy) }
  def post_moderation_records(); end

  sig { params(value: T.any(T::Array[::Thredded::PostModerationRecord], ::Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy)).void }
  def post_moderation_records=(value); end

  sig { returns(::Thredded::Post::ActiveRecord_Associations_CollectionProxy) }
  def posts(); end

  sig { params(value: T.any(T::Array[::Thredded::Post], ::Thredded::Post::ActiveRecord_Associations_CollectionProxy)).void }
  def posts=(value); end

  sig { returns(::Thredded::UserDetail::ActiveRecord_Associations_CollectionProxy) }
  def recently_active_user_details(); end

  sig { params(value: T.any(T::Array[::Thredded::UserDetail], ::Thredded::UserDetail::ActiveRecord_Associations_CollectionProxy)).void }
  def recently_active_user_details=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def recently_active_users(); end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def recently_active_users=(value); end

  sig { returns(::Thredded::Topic::ActiveRecord_Associations_CollectionProxy) }
  def topics(); end

  sig { params(value: T.any(T::Array[::Thredded::Topic], ::Thredded::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def topics=(value); end

  sig { returns(::Thredded::UserDetail::ActiveRecord_Associations_CollectionProxy) }
  def user_details(); end

  sig { params(value: T.any(T::Array[::Thredded::UserDetail], ::Thredded::UserDetail::ActiveRecord_Associations_CollectionProxy)).void }
  def user_details=(value); end

  sig { returns(::Thredded::UserMessageboardPreference::ActiveRecord_Associations_CollectionProxy) }
  def user_messageboard_preferences(); end

  sig { params(value: T.any(T::Array[::Thredded::UserMessageboardPreference], ::Thredded::UserMessageboardPreference::ActiveRecord_Associations_CollectionProxy)).void }
  def user_messageboard_preferences=(value); end

end

module Thredded::Messageboard::ModelRelationShared
  extend T::Sig

  sig { returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def by_messageboard_group(*args); end

  sig { params(args: T.untyped).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def top_level_messageboards(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::Messageboard::ActiveRecord_Relation) }
  def except(*args, &block); end

end
