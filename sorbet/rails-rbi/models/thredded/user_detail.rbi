# This is an autogenerated file for dynamic methods in Thredded::UserDetail
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Thredded::UserDetail::ActiveRecord_Relation < ActiveRecord::Relation
  include Thredded::UserDetail::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::UserDetail)
end

class Thredded::UserDetail::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Thredded::UserDetail::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::UserDetail)
end

class Thredded::UserDetail < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Thredded::UserDetail::ModelRelationShared
  include Thredded::UserDetail::InstanceMethods
  Elem = type_template(fixed: Thredded::UserDetail)
end

module Thredded::UserDetail::InstanceMethods
  extend T::Sig

  sig { void }
  def approved!(); end

  sig { returns(T::Boolean) }
  def approved?(); end

  sig { void }
  def blocked!(); end

  sig { returns(T::Boolean) }
  def blocked?(); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def last_seen_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_seen_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_seen_at?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def latest_activity_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def latest_activity_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def latest_activity_at?(*args); end

  sig { returns(String) }
  def moderation_state(); end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def moderation_state=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def moderation_state?(*args); end

  sig { returns(T.nilable(T.untyped)) }
  def moderation_state_changed_at(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def moderation_state_changed_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def moderation_state_changed_at?(*args); end

  sig { void }
  def pending_moderation!(); end

  sig { returns(T::Boolean) }
  def pending_moderation?(); end

  sig { returns(T.nilable(Integer)) }
  def posts_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def posts_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def posts_count?(*args); end

  sig { returns(T.nilable(Integer)) }
  def topics_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def topics_count=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def topics_count?(*args); end

  sig { returns(T.untyped) }
  def updated_at(); end

  sig { params(value: T.untyped).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(Integer) }
  def user_id(); end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Thredded::UserDetail
  extend T::Sig

  sig { returns(::Thredded::Post::ActiveRecord_Associations_CollectionProxy) }
  def posts(); end

  sig { params(value: T.any(T::Array[::Thredded::Post], ::Thredded::Post::ActiveRecord_Associations_CollectionProxy)).void }
  def posts=(value); end

  sig { returns(::Thredded::PrivatePost::ActiveRecord_Associations_CollectionProxy) }
  def private_posts(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivatePost], ::Thredded::PrivatePost::ActiveRecord_Associations_CollectionProxy)).void }
  def private_posts=(value); end

  sig { returns(::Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy) }
  def private_topics(); end

  sig { params(value: T.any(T::Array[::Thredded::PrivateTopic], ::Thredded::PrivateTopic::ActiveRecord_Associations_CollectionProxy)).void }
  def private_topics=(value); end

  sig { returns(::Thredded::Topic::ActiveRecord_Associations_CollectionProxy) }
  def topics(); end

  sig { params(value: T.any(T::Array[::Thredded::Topic], ::Thredded::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def topics=(value); end

  sig { returns(::User) }
  def user(); end

  sig { params(value: ::User).void }
  def user=(value); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def self.approved(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def self.blocked(*args); end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.moderation_states(); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def self.pending_moderation(*args); end

end

module Thredded::UserDetail::ModelRelationShared
  extend T::Sig

  sig { returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def approved(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def blocked(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def pending_moderation(*args); end

  sig { params(args: T.untyped).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def recently_active(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::UserDetail::ActiveRecord_Relation) }
  def except(*args, &block); end

end
