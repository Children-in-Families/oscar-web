# This is an autogenerated file for dynamic methods in Thredded::PostModerationRecord
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Thredded::PostModerationRecord::ActiveRecord_Relation < ActiveRecord::Relation
  include Thredded::PostModerationRecord::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::PostModerationRecord)
end

class Thredded::PostModerationRecord::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Thredded::PostModerationRecord::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Thredded::PostModerationRecord)
end

class Thredded::PostModerationRecord < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Thredded::PostModerationRecord::ModelRelationShared
  include Thredded::PostModerationRecord::InstanceMethods
  Elem = type_template(fixed: Thredded::PostModerationRecord)
end

module Thredded::PostModerationRecord::InstanceMethods
  extend T::Sig

  sig { void }
  def approved!(); end

  sig { returns(T::Boolean) }
  def approved?(); end

  sig { void }
  def blocked!(); end

  sig { returns(T::Boolean) }
  def blocked?(); end

  sig { returns(T.untyped) }
  def created_at(); end

  sig { params(value: T.untyped).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def messageboard_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def messageboard_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def messageboard_id?(*args); end

  sig { returns(String) }
  def moderation_state(); end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def moderation_state=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def moderation_state?(*args); end

  sig { returns(T.nilable(Integer)) }
  def moderator_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def moderator_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def moderator_id?(*args); end

  sig { void }
  def pending_moderation!(); end

  sig { returns(T::Boolean) }
  def pending_moderation?(); end

  sig { returns(T.nilable(String)) }
  def post_content(); end

  sig { params(value: T.nilable(String)).void }
  def post_content=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def post_content?(*args); end

  sig { returns(T.nilable(Integer)) }
  def post_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def post_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def post_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def post_user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def post_user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def post_user_id?(*args); end

  sig { returns(T.nilable(String)) }
  def post_user_name(); end

  sig { params(value: T.nilable(String)).void }
  def post_user_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def post_user_name?(*args); end

  sig { returns(Integer) }
  def previous_moderation_state(); end

  sig { params(value: Integer).void }
  def previous_moderation_state=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def previous_moderation_state?(*args); end

end

class Thredded::PostModerationRecord
  extend T::Sig

  sig { returns(T.nilable(::Thredded::Messageboard)) }
  def messageboard(); end

  sig { params(value: T.nilable(::Thredded::Messageboard)).void }
  def messageboard=(value); end

  sig { returns(T.nilable(::User)) }
  def moderator(); end

  sig { params(value: T.nilable(::User)).void }
  def moderator=(value); end

  sig { returns(T.nilable(::Thredded::Post)) }
  def post(); end

  sig { params(value: T.nilable(::Thredded::Post)).void }
  def post=(value); end

  sig { returns(T.nilable(::User)) }
  def post_user(); end

  sig { params(value: T.nilable(::User)).void }
  def post_user=(value); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def self.approved(*args); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def self.blocked(*args); end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.moderation_states(); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def self.pending_moderation(*args); end

end

module Thredded::PostModerationRecord::ModelRelationShared
  extend T::Sig

  sig { returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def approved(*args); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def blocked(*args); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def order_newest_first(*args); end

  sig { params(args: T.untyped).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def pending_moderation(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Thredded::PostModerationRecord::ActiveRecord_Relation) }
  def except(*args, &block); end

end
