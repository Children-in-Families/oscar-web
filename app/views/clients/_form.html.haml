= simple_form_for(@client) do |f|
  .panel-body
    = f.error_notification
    .form-inputs
      .row
        .col-xs-12.col-md-4= f.input :first_name, label: "#{t('.name')}"
        .col-xs-12.col-md-4= f.input :gender, collection: [['Male', 'male'], ['Female', 'female']], include_blank: false, label: "#{t('.gender')}"
        .col-xs-12.col-md-4.form-group.date.optional.client_date_of_birth
          %label.date.optional.control-label{ for: 'client_date_of_birth' } #{t('.date_of_birth')}
          #client-birthdate.input-group.date
            = f.text_field :date_of_birth, class: 'date optional form-control date-picker', type: 'text', name: 'client[date_of_birth]', id: 'client_date_of_birth'
            %span.input-group-addon
              %i.glyphicon.glyphicon-calendar
      .row
        .col-xs-12.col-md-4= f.input :school_name, label: "#{t('.school_name')}"
        .col-xs-12.col-md-4= f.input :grade, label: "#{t('.school_grade')}"
        .col-xs-12.col-md-4= f.input :birth_province_id, collection: @province.map{|p| [p.name, p.id]},  label: "#{t('.province')}", placeholder: 'Select birth province'
      .row
        .col-xs-12.col-md-4= f.association :province, collection: @province, label: "#{t('.current_province')}", include_blank: false
        .col-xs-12.col-md-4= f.input :current_address, input_html: { rows: '6' }, label: "#{t('.current_address')}"
        .col-xs-12.col-md-4= f.association :user, collection: @user, label: "#{t('.case_worker_or_staff')}", include_blank: false if current_user.admin?
      .row
        .col-xs-12.col-md-4= f.input :received_by_id, collection: @user.map{|p| [p.name, p.id]}, label: "#{t('.received_by')}", include_blank: false
        .col-xs-12.col-md-4= f.input :followed_up_by_id, collection: @user.map{|p| [p.name, p.id]}, label: "#{t('.followed_up_by')}", include_blank: false
        .col-xs-12.col-md-4.form-group.date.optional.client_follow_up_date
          %label.date.optional.control-label{ for: 'client_follow_up_date' } #{t('.follow_up_date')}
          .input-group.date
            = f.text_field :follow_up_date, class: 'date optional form-control date-picker', type: 'text', name: 'client[follow_up_date]', id: 'client_follow_up_date'
            %span.input-group-addon
              %i.glyphicon.glyphicon-calendar

      .row
        .col-xs-12.col-md-4= f.association :agencies, collection: @agencies, multiple: true, label_method: :name, value_method: :id, label: "#{t('.agencies_involved')}", placeholder: 'Select one or multiple agencies involved'
        - QuantitativeType.all.each do |qt|
          .col-xs-12.col-md-4
            %label= qt.name
            = f.association :quantitative_cases, collection: qt.quantitative_cases, multiple: true, label_method: :value, value_method: :id, label: false, input_html: { class: able_related_info(qt.name) }

        .col-xs-12.col-md-4= f.association :referral_source, collection: @referral_source, label: "#{t('.referral_source')}", include_blank: false
      .row
        .col-xs-12.col-md-4= f.input :relevant_referral_information, input_html: { style: 'height: 120px;' }, label: "#{t('.relevant_referral_information')}"
        .col-xs-12.col-md-8
          .row
            .col-xs-12.col-md-6.form-group.date.optional.client_initial_referral_date
              %label.date.optional.control-label{ for: 'client_initial_referral_date' } #{t('.initial_referral_date')}
              .input-group.date
                = f.text_field :initial_referral_date, class: 'date optional form-control date-picker', type: 'text', name: 'client[initial_referral_date]', id: 'client_initial_referral_date'
                %span.input-group-addon
                  %i.glyphicon.glyphicon-calendar
            .col-xs-12.col-md-6= f.input :referral_phone, label: "#{t('.referral_phone')}"
          .row
            .col-xs-12
              .row
                .col-xs-12.col-md-6
                  .col-xs-12= f.input :has_been_in_orphanage, label: "#{t('.has_been_in_orphanage')}?"
                  .col-xs-12= f.input :has_been_in_government_care, label: "#{t('.has_been_in_government_care')}?"
                  .col-xs-12= f.input :able, as: :hidden
                .col-xs-12.col-md-6
                  .col-xs-12= f.input :able_state, collection: Client::ABLE_STATES, label: "#{t('.able_state')}" if current_user.able_manager? && @client.persisted?
                .col-xs-12.col-md-6
                  .col-xs-12
                    %button.btn.btn-primary{id: 'able-screening-test', "aria-expanded" => 'false', "data-target" => '#able-screening-collapse', "data-toggle" => 'collapse', type: 'button'}
                      %span= t('.able_screening')
      %hr
      .row
        .col-xs-12
          #able-screening-collapse.collapse
            .panel.panel-default
              .panel-heading
                %h4.text-center Able Screening
              .panel-body
                .row
                  .col-xs-12
                    #non-stage-question
                      %h5.text-left.question-group-title= t('.general_question')
                      = f.simple_fields_for(:answers, @answers_non_stage || f.object.answers.of_general_question) do |answer_builder|
                        = render 'answer_fields', f: answer_builder
                    %hr
                .row
                  .col-xs-12
                    .table-responsive#stage-question
                      %h5.text-left.question-group-title= t('.stage')
                      %br
                      %table.table.table-bordered
                        %thead
                          %tr
                            %th.able-screening-header
                            - @ordered_stage.each do |stage|
                              %th.able-screening-header
                                %span= "#{t('.from')} #{stage.from_age} #{t('.to')} #{stage.to_age} #{t('.year')}"
                        %tbody
                          - @able_screening_questions.each do |key, able|
                            %tr
                              %td.text-center
                                %h5.vertical-align-group= QuestionGroup.find(key).name
                              - @ordered_stage.each do |s|
                                %td
                                  = f.simple_fields_for(:answers, @answers_with_stage || f.object.answers.of_stage_question) do |answer_builder|
                                    - if answer_builder.object.able_screening_question.question_group_id == key && answer_builder.object.able_screening_question.stage_id == s.id
                                      .answer{ data: { 'from-age': "#{answer_builder.object.from_age_as_date}", 'to-age': "#{answer_builder.object.to_age_as_date}"} }
                                        .row
                                          .col-xs-12.text-center.able-screening-image
                                            - if answer_builder.object.has_image?
                                              = image_tag(answer_builder.object.able_screening_question.attachments.first.try(:image).try(:thumb))
                                            - else
                                              .image-default
                                                = image_tag('image-placeholder.png')
                                        .row
                                          .col-xs-12.text-center
                                            %h5= answer_builder.object.able_screening_question.question
                                        .row
                                          .col-xs-12.text-center
                                            - if answer_builder.object.able_screening_question.free_text?
                                              = answer_builder.input :description, label: t('.answer')
                                            - else
                                              = answer_builder.input :description, as: :boolean, label: t('.yes_no'), checked_value: 'Yes', unchecked_value: 'No'
                                            = answer_builder.input :able_screening_question_id, as: :hidden, input_html: { value: answer_builder.object.able_screening_question_id }
                                            = answer_builder.input :question_type, as: :hidden, input_html: { value: 'stage' }

  .panel-footer
    .form-actions
      = f.button :submit, t('save'), class: 'btn btn-primary form-btn'
      = link_to t('cancel'), clients_path, class: 'btn btn-default form-btn'
