- data = { translation: rails_i18n_translations, inlineHelpTranslation: JSON.parse(I18n.t('inline_help').to_json), internationalReferredClient: international_referred_client, selectedCountry: selected_country, client: { client: @client, user_ids: @client.user_ids, quantitative_case_ids: @client.quantitative_case_ids, agency_ids: @client.agency_ids, donor_ids: @client.donor_ids, family_ids: @client.family_ids }, referee: @referee.as_json(methods: [:existing_referree]), carer: @carer , users: case_workers_option(@client.id), referralSourceCategory: @referral_source_category, referralSource: ReferralSource.all, birthProvinces: @birth_provinces, currentProvinces: @current_provinces || get_address('province'), districts: @districts.presence || get_address('district'), subDistricts: @subdistricts, communes: @communes.presence || get_address('commune'), villages: @villages.presence || get_address('village'), currentStates: @states, currentTownships: @townships, refereeTownships: @referee_townships, carerTownships: @carer_townships, refereeDistricts: @referee_districts, refereeSubdistricts: @referee_subdistricts, refereeCommunes: @referee_communes, refereeVillages: @referee_villages, carerDistricts: @carer_districts, carerSubdistricts: @carer_subdistricts, carerCommunes: @carer_communes, carerVillages: @carer_villages, donors: @donors, agencies: @agencies, quantitativeType: QuantitativeType.all, quantitativeCase: QuantitativeCase.all, schoolGrade: [Client::GRADES, t('advanced_search.fields.school_grade_list').values].transpose, ratePoor: [t('clients.level').values, Client::CLIENT_LEVELS].transpose, schoolGrade: [Client::GRADES, t('advanced_search.fields.school_grade_list').values].transpose, families: @families, refereeRelationships: @referee_relationships, clientRelationships: @client_relationships, callerRelationships: @caller_relationships, addressTypes: @address_types, phoneOwners: @phone_owners, fieldsVisibility: fields_visibility, current_organization: JSON.parse(current_organization.to_json), brc_address: get_address_json, maritalStatuses: Client::MARITAL_STATUSES, nationalities: Client::NATIONALITIES, ethnicities: Client::ETHNICITY, traffickingTypes: Client::TRAFFICKING_TYPES, brc_islands: Client::BRC_BRANCHES, brc_resident_types: Client::BRC_RESIDENT_TYPES, brc_presented_ids: Client::BRC_PRESENTED_IDS, brc_prefered_langs: Client::BRC_PREFERED_LANGS, customId1: custom_id_translation('custom_id1'), customId2: custom_id_translation('custom_id2'), referees: Referee.where(anonymous: false) }

= render 'inline_help_note'
= react_component('NewClientForm', { data: data })
-# = simple_form_for @client, html: { id: 'client-wizard-form'} do |f|
-#   %p.hide#client-id= @client.id
-#   = hidden_field_tag :client_id, @client.id
-#   = hidden_field_tag :client_status, @client.status
-#   = f.hidden_field :slug, input_html: { value: @client.slug }
-#   = f.hidden_field :archived_slug, input_html: { value: @client.archived_slug }
-#   = f.hidden_field :status, input_html: { value: @client.status }
-#   = f.hidden_field :country_origin, input_html: { value: @client.country_origin }
-#   .client-steps{ data: {blank: t('.blank'), next: t('.next'), previous: t('.previous'), done: t('.done')} }
-#     = render 'getting_started', f: f
-#     = render 'living_detail', f: f
-#     = render 'other_detail', f: f
-#     = render 'specific_point', f: f
-#   - if @client.persisted?
-#     .text-right
-#       = submit_tag t('save'), class: 'btn btn-primary save-edit-client', data: { disable_with: "#{t('save')}..." }
-#     = link_to t('cancel'), client_path, class: 'btn btn-default cancel-client-button'
-#   - else
-#     = link_to t('cancel'), clients_path, class: 'btn btn-default cancel-client-button'
-#   = render 'confirm_client'
-#   = render 'confirm_client_with_family_record', f: f
