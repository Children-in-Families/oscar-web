= simple_form_for(@domain) do |f|
  .ibox-content
    = hidden_field_tag :tab, params[:tab]
    = hidden_field_tag :custom_assessment_setting_id, params[:custom_assessment_setting_id].presence || @custom_assessment_setting&.id
    = error_notification(f)
    .form-inputs
      .row
        .col-xs-3
          = f.association :domain_group, collection: DomainGroup.all, label: t('.domain_group'), include_blank: false, input_html: { class: 'select2' }
        .col-xs-6
          = f.input :name, label: t('.name')
        .col-xs-3
          = f.input :identity, label: t('.identity')
      .row
        .col-xs-3
          = f.input :score_1_color, collection: Domain.domain_score_colors.map{ |ds| [ds[1], ds[0]]}, label: t('.score_1'), include_blank: false, input_html: { class: 'select2' }
        .col-xs-3
          = f.input :score_1_definition, label: t('.interpretation')
        .col-xs-3
          = f.input :score_1_local_definition, label: "#{t('.interpretation')} (#{country_langauge})"
        .col-xs-3{ id: 'domain-type-wrapper', data: { enable: f.object.persisted? || f.object.domain_type != 'client' ? 'false' : 'true' } }
          = f.input :domain_type, collection: Domain::TYPES, selected: f.object.domain_type, label: 'Attach with', input_html: { class: 'select2' }
          = f.hidden_field :domain_type, value: f.object.domain_type || params[:domain_type] if f.object.persisted? || !params[:copy] || f.object.domain_type != 'client'
        .col-xs-3
          #domain_custom_assessment_setting{ class: (f.object.domain_type && f.object.domain_type != 'client') && 'hidden' }
            - if params[:copy] == "true" || params[:custom_assessment_setting_id].present? || @custom_assessment_setting
              = f.input :custom_assessment_setting_id, collection: @custom_assessment_settings.map{ |ca| [ca.custom_assessment_name, ca.id]}, label: t('.custom_assessment_name'), include_blank: true, input_html: { class: 'select2' }
            - else
              = f.hidden_field :custom_assessment_setting_id

      - (2..10).each do |score|
        .row
          .col-xs-3
            = f.input "score_#{score}_color", collection: Domain.domain_score_colors.map{ |ds| [ds[1], ds[0]]}, label: t(".score_#{score}"), include_blank: false, input_html: { class: 'select2' }
          .col-xs-3
            = f.input "score_#{score}_definition", label: t('.interpretation')
          .col-xs-3
            = f.input "score_#{score}_local_definition", label: "#{t('.interpretation')} (#{country_langauge})"

      %hr
      .row
        .col-xs-12
          = f.label :description, t('.description')
          = f.text_area :description, class: 'tinymce', rows: 30
          %br
      .row
        .col-xs-12
          = f.label :description, "#{t('.description')} (#{country_langauge})"
          = f.text_area :local_description, class: 'tinymce', rows: 30
  .ibox-footer
    = f.submit t('.save'), class: 'btn btn-primary form-btn', data: { disable_with: t('saving') }
    = link_to t('.cancel'), domains_path, class: 'btn btn-default form-btn'
