- if get_domains(domain_note).present?
  .ibox.case-note-domain-group
    .ibox-title
      %h5
        = "#{t('.domain')} #{domain_note.object.domain_group.name}"
        = "(#{get_domains(domain_note, @custom_assessment_setting&.id)})"
      .ibox-tools
        %a.collapse-link
          .btn.btn-outline.btn-primary
            %i.fa{ class: "fa-chevron-#{domain_note.object.domain_group.first_ordered? ? 'up' : 'down'}" }

    .ibox-content{ class: "#{domain_note.object.domain_group.first_ordered? ? '' : 'collapse'}" }
      .row
        .col-xs-12.col-md-6
          - if @current_setting.enable_default_assessment
            = domain_note.input :note, label: false, input_html: { rows: 6, placeholder: t('.note') }
          = domain_note.hidden_field :domain_group_id
        .col-xs-12.col-md-6
          - domains = fetch_domains(domain_note)
          - domains.each do |domain|
            - tasks = @case_note.client.tasks.where(domain_id: domain.id)
            - if domain_note.object.persisted?
              - tasks = tasks.by_case_note_domain_group(domain_note.object)
            .panel{ class: "panel-default task-domain-#{domain.id} #{hidden_class(tasks.incomplete.blank?)}" }
              .panel-heading
                %strong
                  = t('.domain')
                  - if @case_note.custom
                    = domain.name
                  - else
                    = t("domains.domain_names.#{domain.name.downcase.reverse}")
              = render 'tasks_list', { domain_note: domain_note, domain: domain, tasks: tasks }
        .col-xs-12
          = render 'attachment_fields', { domain_note: domain_note }
      .row
        .col-xs-12
          .case-note-task-btn.btn.btn-primary.btn-outline.pull-right{class: "#{policy(@client).create? ? '' : 'disabled'}", type: 'button', 'data-target' => "#tasksFromModal", 'data-persisted' => 'true', 'data-toggle' => 'modal', 'data-domains': "#{translate_domain_name(domains, @case_note)}"}
            = t('.add_task')

