= simple_form_for([assessment.client, assessment], html: { class: 'assessment-form unrestricted_form', data: { disable_required_fields: current_setting.disable_required_fields? } }) do |f|
  = hidden_field_tag :current_user, current_user.roles
  = hidden_field_tag :default, params[:default] if params[:default]
  = hidden_field_tag :from_controller, @from_controller
  .row.assessment-domains
    .col-xs-12
      .ibox
        .ibox-title
          %h5
            = "#{assessment.client.name}"
            - if current_setting.show_prev_assessment? && @prev_assessment.present?
              - if readonly
                %span= " (Previous Assessment)"
              - else
                %span= " (Current Assessment)"

          .ibox-tools
            - unless readonly
              = link_to client_assessments_path(@client), class: 'btn btn-default btn-back-default button' do
                = t('.back')
        .ibox-content
          .root-wizard{ id:( readonly ? 'readonly-rootwizard' : 'rootwizard'), data: { cancel: t('.cancel'), next: t('.next'), previous: t('.previous'), finish: t('.finish'), save: t('.save'), saving: t('saving'), action: params['action'] } }
            = f.simple_fields_for 'assessment_domains', order_assessment(assessment) do |ad|
              - domain = ad.object.domain
              %h4= domain_name_translate(assessment, domain)
              %div{ class: "assessment-domain-item assessment-wizard-domain-item domain-#{domain.id}" }
                = ad.hidden_field :domain_id
                .well
                  = ad.object.domain.translate_description.html_safe
                #required-scroll
                %label.text.required.control-label{"aria-required" => "true" }
                  = t('.reason')
                = ad.input :reason, label: false, placeholder: t('.reason_placeholder'), required: !current_setting.disable_required_fields?, input_html: { class: 'reason' }, disabled: readonly
                %label= t('.score_label')
                %a{:role => "button", :tabIndex => "0",  data: { toggle: "popover", trigger: "focus", content: "#{I18n.t('inline_help.clients.assessments.observation').html_safe}", placement: "right" } }
                  = fa_icon "info-circle", class: 'text-info m-xs'
                - random = [1,2,3,4]
                - rd = current_setting.random_order? ? random.shuffle : random
                #score-required
                - if is_domain_definition(domain)
                  .score_option.with-def{ data: { 'score-1': domain.score_1_color, 'score-2': domain.score_2_color, 'score-3': domain.score_3_color, 'score-4': domain.score_4_color, 'domain-id': domain.id } }
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': rd[0] }
                      %b= score_definition(domain.send("translate_score_#{rd[0]}_definition").to_s, rd[0])
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': rd[1] }
                      %b= score_definition(domain.send("translate_score_#{rd[1]}_definition").to_s, rd[1])
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': rd[2] }
                      %b= score_definition(domain.send("translate_score_#{rd[2]}_definition").to_s, rd[2])
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': rd[3] }
                      %b= score_definition(domain.send("translate_score_#{rd[3]}_definition").to_s, rd[3])
                    = ad.hidden_field :score, class: 'selected-score'
                - else
                  .score_option.without-def{ data: { 'score-1': domain.score_1_color, 'score-2': domain.score_2_color, 'score-3': domain.score_3_color, 'score-4': domain.score_4_color, 'domain-id': domain.id } }
                    = ad.collection_radio_buttons :score, [%w(1 1), %w(2 2), %w(3 3), %w(4 4)].shuffle, :first , :last, disabled: readonly
                %a{:role => "button", :tabIndex => "0",  data: { toggle: "popover", trigger: "focus", content: "#{I18n.t('inline_help.clients.assessments.goal')}".html_safe, placement: "right", html: true } }
                  = fa_icon "info-circle", class: 'text-info m-xs'
                = ad.label :goal, required: !current_setting.disable_required_fields?, label: t('.goal')
                / .col-xs-12.col-sm-6.col-md-4
                .goal-required-option{ id: "i-checks-#{domain.name.downcase.split.join('-')}", disabled: readonly, class: ad.object.score == 4 ? '' : 'hidden' }
                  %label= t('.set_goal')
                  = ad.input :goal_required, as: :radio_buttons, collection: [['Yes', true],['No', false]], label: false, input_html: { 'data-goal-option': domain.name.downcase.split.join('-') }, disabled: readonly

                = ad.input :goal, label: false, required: (ad.object.goal_required? && !current_setting.disable_required_fields?), input_html: { class: 'goal', id: "goal-text-area-#{domain.name.downcase.split.join('-')}" }, disabled: readonly

                .row
                  .col-sm-12.col-md-12
                    = render 'attachment_fields', ad: ad, readonly: readonly
                .row
                  .col-sm-12.col-md-12
                    .form-group
                      - if !current_setting.disable_required_fields? && !readonly
                        - unless readonly
                          %p.text-danger.task_required{ style: !@client.tasks.by_domain_id(domain).incomplete.empty? && 'display: none;' }
                            %abbr{ title: 'required' } *
                            = t('.at_least_one_task_required')

                      %div{ class: "task-arising" }
                        .task-label
                          %a{:role => "button", :tabIndex => "0",  data: { toggle: "popover", trigger: "focus", content: "#{I18n.t('inline_help.clients.assessments.task_arising')}".html_safe, placement: "right", html: true } }
                            = fa_icon "info-circle", class: 'text-info m-xs'
                          %label.control-label
                            = t('.tasks_arising')
                            - if action_name == 'new' && !readonly
                              .task-required-option{ id: "i-checks-tasks-#{domain.name.downcase.split.join('-')}" }
                                %label= t('.add_task_confirm')
                                = ad.input :required_task_last, as: :radio_buttons, collection: [['Yes', true], ['No', false]], label: false, input_html: { 'data-task-name': domain.name }, disabled: readonly
                        %ol.tasks-list{ type: '1'}
                          - @client.tasks.by_domain_id(domain).where(taskable: assessment).incomplete.each do |task|
                            %li.list-group-item{style: 'padding-bottom: 11px'}
                              = task.name
                              - if can?(:destroy, Task) && !readonly
                                %a.pull-right.remove-task.fa.fa-trash.btn.btn-outline.btn-danger.btn-xs{'data-url' => "/clients/#{@client.id}/tasks/#{task.id}", 'data-persisted' => 'true', :style => "margin: 0;"}
                    - unless readonly
                      .form-group.add-task-btn-wrapper
                        %button.assessment-task-btn.btn.btn-primary.pull-right{class: "#{(policy(@client).create?) ? '' : 'disabled'}", type: 'button', data: { toggle: "modal", domain_id: "#{domain.id}", target: "#tasksFromModal", trigger: "hover", content: "#{I18n.t('inline_help.clients.assessments.add_task')}", placement: "auto" } }
                          = t('.add_task')

- if policy(@client).create?
  = render 'add_task_form'
