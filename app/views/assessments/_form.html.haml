= simple_form_for([@assessment.client, @assessment], html: { class: 'assessment-form' }) do |f|
  = hidden_field_tag :current_user, current_user.roles
  = hidden_field_tag :default, params[:default] if params[:default]
  .row.assessment-domains
    .col-xs-12
      #rootwizard{ data: { next: t('.next'), previous: t('.previous'), finish: t('.finish'), save: t('.save'), saving: t('saving'), action: params['action'] } }
        = f.simple_fields_for 'assessment_domains', order_assessment do |ad|
          - domain = ad.object.domain
          %h4= domain.name
          %div{ class: "assessment-domain-item domain-#{domain.id}" }
            .ibox
              .ibox-title
                %h5= "#{@assessment.client.name}"
                %label.label.label-success= "#{t('.domain')} #{domain.name}"
                .ibox-tools
                  = link_to client_assessments_path(@client) do
                    .btn.btn-default.btn-back-default.button
                      = t('.back')
              .ibox-content
                = ad.hidden_field :domain_id
                .well
                  = ad.object.domain.translate_description.html_safe
                = ad.input :reason, label: t('.reason'), placeholder: t('.reason_placeholder'), required: true, input_html: { class: 'reason' }
                %label= t('.score_label')
                - if is_domain_definition(domain)
                  .score_option.with-def{ data: { 'score-1': domain.score_1_color, 'score-2': domain.score_2_color, 'score-3': domain.score_3_color, 'score-4': domain.score_4_color, 'domain-id': domain.id } }
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': 1 }
                      %b= score_definition(domain.translate_score_1_definition, 1)
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': 2 }
                      %b= score_definition(domain.translate_score_2_definition, 2)
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': 3 }
                      %b= score_definition(domain.translate_score_3_definition, 3)
                    .btn-option.btn.btn-block.wrap-text-style{ 'data-score': 4 }
                      %b= score_definition(domain.translate_score_4_definition, 4)
                    = ad.hidden_field :score, class: 'selected-score'
                - else
                  .score_option.without-def{ data: { 'score-1': domain.score_1_color, 'score-2': domain.score_2_color, 'score-3': domain.score_3_color, 'score-4': domain.score_4_color, 'domain-id': domain.id } }
                    = ad.collection_radio_buttons :score, [%w(1 1), %w(2 2), %w(3 3), %w(4 4)], :first, :last
                = ad.label :goal, required: true, label: t('.goal')
                / .col-xs-12.col-sm-6.col-md-4
                .goal-required-option{ id: "i-checks-#{domain.name.downcase.split.join('-')}", class: ad.object.score == 4 ? '' : 'hidden' }
                  %label= t('.set_goal')
                  = ad.input :goal_required, as: :radio_buttons, collection: [['Yes', true],['No', false]], label: false, input_html: { 'data-goal-option': domain.name.downcase.split.join('-') }

                = ad.input :goal, label: false, required: ad.object.goal_required?, input_html: { class: 'goal', id: "goal-text-area-#{domain.name.downcase.split.join('-')}" }
                .row
                  .col-sm-12.col-md-12
                    = render 'attachment_fields', ad: ad
                .row
                  .col-sm-12.col-md-12
                    .form-group
                      %p.text-danger.task_required
                        %abbr{ title: 'required' } *
                        = t('.at_least_one_task_required')
                      %div{ class: "task-arising" }
                        %label.control-label
                          = t('.tasks_arising')
                          - if action_name == 'new'
                            .task-required-option{ id: "i-checks-tasks-#{domain.name.downcase.split.join('-')}" }
                              %label= t('.add_task_confirm')
                              = ad.input :required_task_last, as: :radio_buttons, collection: [['Yes', true],['No', false]], label: false, input_html: { 'data-task-name': domain.name }
                        %ol.tasks-list{ type: '1'}
                          - @client.tasks.by_domain_id(domain).incomplete.each do |task|
                            %li.list-group-item{style: 'padding-bottom: 11px'}
                              = task.name
                              - if can? :destroy, Task
                                %a.pull-right.remove-task.fa.fa-trash.btn.btn-outline.btn-danger.btn-xs{'data-url' => "/clients/#{@client.id}/tasks/#{task.id}", 'data-persisted' => 'true', :style => "margin: 0;"}
                    .form-group.add-task-btn-wrapper
                      %button.assessment-task-btn.btn.btn-primary.pull-right{class: "#{policy(@client).create? ? '' : 'disabled'}", type: 'button', 'data-target' => "#tasksFromModal", 'data-toggle' => 'modal', 'data-domain-id': "#{domain.id}"}
                        = t('.add_task')
        - if ['new', 'create'].include?(action_name)
          %h4#header-domain-last Last Step
          %div{ class: "assessment-domain-item domain-last" }
            .ibox
              .ibox-title
                %h5= @assessment.client.name
                .ibox-tools
                  = link_to client_assessments_path(@client) do
                    .btn.btn-default.btn-back-default.button
                      = t('.back')
              .ibox-content
                %p#end-of-assessment-msg.text-center.bg-success= t('.finished_assessment_msg')


- if policy(@client).create?
  = render 'add_task_form'
