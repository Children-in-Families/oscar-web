= simple_form_for([@care_plan.client, @care_plan], html: { id: "#{action_name}-care_plan", class: 'care_plan-form' }) do |f|
  - assessment = @assessment || Assessment.find_by(id: params[:care_plan][:assessment_id])
  = f.hidden_field :assessment_id, value: assessment.id
  .row.care_plan-domains
    .col-xs-12
      #rootwizard.root-wizard{ data: { cancel: t('.cancel'), next: t('.next'), previous: t('.previous'), finish: t('.finish'), save: t('.save'), saving: t('saving'), action: params['action'] } }
        = f.simple_fields_for 'assessment_domains', order_assessment(assessment) do |ad|
          = f.hidden_field :assessment_domain_id, value: ad.object.id
          - score_color = ad.object.domain.send("score_#{ad.object.score}_color") if ad.object.score
          - domain = ad.object.domain
          %h4= domain_name_translate(assessment, domain)
          %div{ class: "assessment-domain-item assessment-wizard-domain-item domain-#{domain.id}" }
            .ibox
              .ibox-title
                %p{:class => "hide score-color"}= score_color
                %h4= "#{assessment.client.name}"
                - if domain.custom_domain?
                  %p= "#{t('.domain')} #{domain.name} #{domain.identity}"
                - elsif current_organization.try(:aht) == true
                  %p= domain_name_for_aht(ad.object)
                - else
                  %p= "#{t('.domain')} #{t("domains.domain_names.#{ad.object.domain.name.downcase.reverse}")} #{t("domains.domain_identies.#{ad.object.domain.identity.strip.parameterize('_')}_#{ad.object.domain.name.downcase}")}"

                %p= "#{t('.scoring_statement')}: #{strip_tags(score_definition(domain.send("translate_score_#{ad.object.score}_definition").to_s, ad.object.score))}" if ad.object.score
                %p
                  = "#{t('.score_from_assessment')} :"
                  %span.btn.btn-default= ad.object.score
              .ibox-content
                %p.hide.required-message= t('.required_message')
                - required_asterisk = ad.object.domain["score_#{ad.object.score}_color"] != 'primary'
                .row.goal-task-title
                  .col-md-4.col-xs-12
                    - if required_asterisk
                      %abbr{ title: 'required' } *
                    = t('.goal')
                  .col-md-4.col-xs-12
                    - if required_asterisk
                      %abbr{ title: 'required' } *
                    = t('.task')
                  .col-md-4.col-xs-12
                    - if required_asterisk
                      %abbr{ title: 'required' } *
                    %p= t('.expected_date')
                .row
                  .div.box
                    - params.merge!({domain_id: ad.object.domain.id, assessment_domain_id: ad.object.id, assessment_id: assessment.id})
                    .goals
                      = f.fields_for :goals do |goal|
                        - if @care_plan.persisted?
                          - if goal.object.assessment_domain_id == ad.object.id
                            = render 'goal_fields', f: goal
                        - else
                          = render 'goal_fields', f: goal
                .row
                  .div.add-goal-btn
                    = link_to_add_association t('.add_goal'), f, :goals, class: 'btn-add-goal btn btn-outline btn-success'

