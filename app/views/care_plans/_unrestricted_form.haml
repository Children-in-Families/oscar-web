= simple_form_for([client, care_plan], html: { id: "#{action_name}-care_plan", class: 'care_plan-form unrestricted_form', data: { disable_required_fields: current_setting.disable_required_fields? } }) do |f|
  - assessment = @assessment || Assessment.find_by(id: params[:care_plan][:assessment_id])
  = f.hidden_field :assessment_id, value: assessment.id
  = f.hidden_field :id, value: nil if !readonly && care_plan.persisted? && action_name == 'new'
  .ibox
    .ibox-title
      %h5
        = "#{care_plan.client.name}"
        - if current_setting.show_prev_assessment? && @prev_care_plan.present?
          - if readonly
            %span= t('care_plans.new.current_care_plan', care_plan: t('clients.care_plan') )
          - else
            %span= t('care_plans.new.previous_care_plan', care_plan: t('clients.care_plan'))

      .ibox-tools
        - unless readonly
          = link_to client_care_plans_path(care_plan.client), class: 'btn btn-default btn-back-default button' do
            = t('.back')

    .ibox-content
      = render 'care_plan_date_input', f: f
      .root-wizard{ id:( readonly ? 'readonly-rootwizard' : 'rootwizard'), data: { cancel: t('care_plans.form.cancel'), next: t('care_plans.form.next'), previous: t('care_plans.form.previous'), finish: t('care_plans.form.finish'), save: t('care_plans.form.save'), saving: t('saving'), action: params['action'] } }
        = f.simple_fields_for 'assessment_domains', order_assessment(assessment) do |ad, _|
          = f.hidden_field :assessment_domain_id, value: ad.object.id
          - score_color = ad.object.domain.send("score_#{ad.object.score}_color") if ad.object.score
          - domain = ad.object.domain
          %h4= domain_name_translate(assessment, domain)
          %div{ class: "assessment-domain-item care-plan-wizard-domain-item domain-#{domain.id}" }
            - unless readonly
              .ibox
                .ibox-title
                  %p{:class => "hide score-color"}= 'primary'
                  %h4= "#{assessment.client.name}"
                  - if domain.custom_domain?
                    %p= "#{t('care_plans.form.domain')} #{domain.name} #{domain.identity}"
                  - elsif current_organization.aht?
                    %p= domain_name_for_aht(ad.object, ad.index)
                  - else
                    %p= "#{t('care_plans.form.domain')} #{t("domains.domain_names.#{ad.object.domain.name.downcase.reverse}")} #{t("domains.domain_identies.#{ad.object.domain.identity.strip.parameterize('_')}_#{ad.object.domain.name.downcase}")}"

                  - domain_definition = domain.send("translate_score_#{ad.object.score}_definition") unless ad.object.score.nil?
                  %p
                    = "#{t('care_plans.form.scoring_statement')}: #{strip_tags(score_definition(domain_definition.to_s, ad.object.score.to_s))}" if ad.object.score
                    %a{ :role => "button", :tabIndex => "0",  data: { toggle: "popover", trigger: "focus", title: domain_definition, content: display_domain_definition_description(domain, domain_definition) } }
                      = fa_icon "info-circle", class: 'text-info m-xs'
                  - if list_case_conference_domain_for_care_plan(assessment, ad).present?
                    %h4= t('case_conferences.form.issue_to_be_addressed')
                    %ul
                      - list_case_conference_domain_for_care_plan(assessment, ad).each do |ccia|
                        %li= ccia.title
                  %p
                    = "#{t('care_plans.form.score_from_assessment')} :"
                    %span.btn.btn-default= ad.object.score
                .ibox-content
                  %p.hide.required-message= t('care_plans.form.required_message')
                  - required_asterisk = ad.object.domain["score_#{ad.object.score}_color"] != 'primary' && !current_setting.disable_required_fields?
                  .row.goal-task-title
                    .col-md-4.col-xs-12
                      - if required_asterisk
                        %abbr{ title: 'required' } *
                      = t('care_plans.form.goal')
                    .col-md-4.col-xs-12
                      - if required_asterisk
                        %abbr{ title: 'required' } *
                      = t('care_plans.form.task')
                    .col-md-4.col-xs-12
                      - if required_asterisk
                        %abbr{ title: 'required' } *
                      %p= t('care_plans.form.expected_date')
                  .row
                    .div.box
                      - params.merge!({domain_id: ad.object.domain.id, assessment_domain_id: ad.object.id, assessment_id: assessment.id})
                      .goals
                        - if f.object.persisted? && action_name == 'new' && f.object.is_goals_tasks_exist?(domain.id)
                          = f.fields_for :goals, f.object.goals do |goal|
                            - if goal.object.assessment_domain.domain_id == domain.id
                              = render 'goal_fields', f: goal

                        = f.fields_for :goals do |goal|
                          - if care_plan.persisted?
                            - if goal.object.assessment_domain_id == ad.object.id
                              = render 'goal_fields', f: goal
                          - else
                            = render 'goal_fields', f: goal
                  .row
                    .div.add-goal-btn
                      = link_to_add_association t('care_plans.form.add_goal'), f, :goals, class: 'btn-add-goal btn btn-outline btn-success'
