= simple_form_for([@care_plan.family, @care_plan], html: { id: "#{action_name}-care_plan", class: 'care_plan-form' }) do |f|
  - assessment = @assessment || Assessment.find_by(id: params[:care_plan][:assessment_id])
  = f.hidden_field :assessment_id, value: assessment.id
  .row.care_plan-domains
    .col-xs-12
      #rootwizard.root-wizard{ data: { cancel: t('care_plans.form.cancel'), next: t('care_plans.form.next'), previous: t('care_plans.form.previous'), finish: t('care_plans.form.finish'), save: t('care_plans.form.save'), saving: t('saving'), action: params['action'] } }
        = f.simple_fields_for 'assessment_domains', order_assessment(assessment) do |ad|
          = f.hidden_field :assessment_domain_id, value: ad.object.id
          - score_color = ad.object.domain.send("score_#{ad.object.score}_color")
          - domain = ad.object.domain

          %h4= domain.name
          %div{ class: "assessment-domain-item domain-#{domain.id}" }
            .ibox
              .ibox-title
                %p{:class => "hide score-color"}= score_color
                %h4= "#{assessment.family.name}"
                %p= "#{t('care_plans.form.domain')} #{ad.object.domain.name} #{ad.object.domain.identity} #{ad.object.domain.name}"
                %p= "#{t('care_plans.form.scoring_statement')}: #{strip_tags(score_definition(domain.send("translate_score_#{ad.object.score}_definition").to_s, ad.object.score.to_s))}"
                %p
                  = "#{t('care_plans.form.score_from_assessment')} :"
                  %span.btn.btn-default= ad.object.score
              = render 'shared/care_plan_date_input', f: f
              .ibox-content
                %p.hide.required-message= t('care_plans.form.required_message')
                .row.goal-task-title
                  .col-md-4.col-xs-12
                    %label.date.required.control-label{ for: 'goal' }
                      - if ad.object.domain["score_#{ad.object.score}_color"] != 'primary'
                        %abbr{ title: 'required' } *
                      = t('care_plans.form.goal')
                  .col-md-4.col-xs-12
                    %label.date.required.control-label{ for: 'task' }
                      - if ad.object.domain["score_#{ad.object.score}_color"] != 'primary'
                        %abbr{ title: 'required' } *
                      = t('care_plans.form.task')
                  .col-md-4.col-xs-12
                    %p= t('care_plans.form.expected_date')
                .row
                  .div.box
                    - params.merge!({domain_id: ad.object.domain.id, assessment_domain_id: ad.object.id, assessment_id: assessment.id})
                    .goals
                      = f.fields_for :goals do |goal|
                        - if @care_plan.persisted?
                          - if goal.object.assessment_domain_id == ad.object.id
                            = render 'goal_fields', f: goal
                        - else
                          = render 'goal_fields', f: goal
                .row
                  .div.add-goal-btn
                    = link_to_add_association t('care_plans.form.add_goal'), f, :goals, class: 'btn-add-goal btn btn-outline btn-success'

