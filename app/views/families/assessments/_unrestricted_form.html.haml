= simple_form_for([assessment.family, assessment], html: { class: 'assessment-form unrestricted_form', data: { disable_required_fields: current_setting.disable_required_fields? } }) do |f|
  = hidden_field_tag :current_user, current_user.roles
  = hidden_field_tag :default, params[:default] if params[:default]
  = hidden_field_tag :from_controller, @from_controller
  = hidden_field_tag :custom_name, params[:custom_name] || @custom_assessment_setting.try(:custom_assessment_name)
  .row.assessment-domains
    .col-xs-12
      .ibox
        .ibox-title
          %h5
            = "#{assessment.family.name}"
            - if current_setting.show_prev_assessment? && @prev_assessment.present?
              - if readonly
                %span= " (Previous Assessment)"
              - else
                %span= " (Current Assessment)"

          .ibox-tools
            - unless readonly
              = link_to family_assessments_path(@family), class: 'btn btn-default btn-back-default button' do
                = t('assessments.unrestricted_form.back')
        .ibox-content
          .root-wizard{ id:( readonly ? 'readonly-rootwizard' : 'rootwizard'), data: { cancel: t('assessments.unrestricted_form.cancel'), next: t('assessments.unrestricted_form.next'), previous: t('assessments.unrestricted_form.previous'), finish: t('assessments.unrestricted_form.finish'), save: t('assessments.unrestricted_form.save'), saving: t('saving'), action: params['action'] } }
            = f.simple_fields_for 'assessment_domains', order_assessment(assessment) do |ad|
              - domain = ad.object.domain
              %h4= "#{domain.name} (#{domain.identity})"
              %div{ class: "assessment-domain-item assessment-wizard-domain-item domain-#{domain.id}" }
                = ad.hidden_field :domain_id
                .well
                  = ad.object.domain.translate_description.html_safe
                #required-scroll
                %label.text.required.control-label{"aria-required" => "true" }
                  = t('assessments.unrestricted_form.reason')
                = ad.input :reason, label: false, placeholder: t('assessments.unrestricted_form.reason_placeholder_family'), required: !current_setting.disable_required_fields?, input_html: { class: 'reason' }, disabled: readonly
                %label= t('assessments.unrestricted_form.score_label_family')
                %a{:role => "button", :tabIndex => "0",  data: { toggle: "popover", trigger: "focus", content: "#{I18n.t('inline_help.clients.assessments.observation').html_safe}", placement: "right" } }
                  = fa_icon "info-circle", class: 'text-info m-xs'
                - random = [1,2,3,4,5,6,7,8,9,10]
                - rd = current_setting.random_order? ? random.shuffle : random
                #score-required
                - if is_domain_definition(domain)
                  .score_option.with-def{data: {'score-1': domain.score_1_color,
                                                'score-2': domain.score_2_color,
                                                'score-3': domain.score_3_color,
                                                'score-4': domain.score_4_color,
                                                'score-5': domain.score_5_color,
                                                'score-6': domain.score_6_color,
                                                'score-7': domain.score_7_color,
                                                'score-8': domain.score_8_color,
                                                'score-9': domain.score_9_color,
                                                'score-10': domain.score_10_color,
                                                'domain-id': domain.id }}
                    - (0..9).each do |domain_index|
                      - interpretion = domain.send("translate_score_#{rd[domain_index]}_definition").to_s
                      - if interpretion.present?
                        .btn-option.btn.btn-block.wrap-text-style{ 'data-score': rd[domain_index] }
                          %b= score_definition(interpretion, rd[domain_index])
                    = ad.hidden_field :score, class: 'selected-score'
                - else
                  .score_option.without-def{ data: { 'score-1': domain.score_1_color, 'score-2': domain.score_2_color, 'score-3': domain.score_3_color, 'score-4': domain.score_4_color, 'domain-id': domain.id } }
                    = ad.collection_radio_buttons :score, [%w(1 1), %w(2 2), %w(3 3), %w(4 4)].shuffle, :first , :last, disabled: readonly

                .row
                  .col-sm-12.col-md-12
                    = render 'attachment_fields', ad: ad, readonly: readonly
