import React from 'react'
import { t } from '../../utils/i18n'
import {
  SelectInput,
  TextArea
} from '../Commons/inputs'

export default props => {
  const { onChange, fieldsVisibility, current_organization, translation, hintText, data: { client, quantitativeType, quantitativeCase, T } } = props

  const onChangeQuantitative = ({data, action, removed, type, options, isMulti}) => {
    const selectedCases = client.quantitative_case_ids
    let value = []

    if (isMulti) {
      if (action === 'remove-value') {
        selectedCases.splice(selectedCases.indexOf(removed), 1)
        value = selectedCases
      } else if (action === 'select-option')
        value = [ ...new Set([ ...selectedCases, ...data])]
      else if (action === 'clear') {
        removed.forEach(removedValue => {
          selectedCases.splice(selectedCases.indexOf(removedValue), 1)
        })
        value = selectedCases
      }
    } else {
      options.forEach(option => {
        let index = selectedCases.indexOf(option.value)

        if (index > -1) {
          selectedCases.splice(index, 1)
        }
      })

      value = [ ...new Set([ ...selectedCases, ...[data]])]
    }

    onChange('client', 'quantitative_case_ids')({data: value, type})
  }

  const renderQuantitativeCases = () => {
    return (
      quantitativeType.map((type, index) => {
        return (
          <div className="row" key={index}>
            <div className="col-xs-12 col-md-12 col-lg-12">
              <SelectInput
                isMulti={type.multiple}
                label={type.name}
                value={client.quantitative_case_ids}
                onChange={onChangeQuantitative}
                options={ quantitativeCase.filter(ftr => { return ftr.quantitative_type_id === type.id }).map( qc => ({ label: qc.value, value: qc.id }) ) }
              />
            </div>
          </div>
        )
      })
    )
  }

  return (
    <div className="containerClass">
      <legend>
        <div className="row">
          <div className="col-xs-12 col-md-6 col-lg-10">
            <p>{T.translate("referralVulnerability.referral_vulnerability")}</p>
          </div>
        </div>
      </legend>

      { renderQuantitativeCases() }

      {
        fieldsVisibility.relevant_referral_information == true &&
        <div className="row">
          <div className="col-xs-12 col-md-12 col-lg-12">
            <TextArea
              label={ t(translation, 'clients.form.relevant_referral_information') }
              onChange={onChange('client', 'relevant_referral_information')}
              value={client.relevant_referral_information}
              inlineClassName="relevant-info"
              hintText={current_organization.short_name == 'ratanak' ? hintText.custom.ratanak.relevant_info : hintText.custom.relevant_info}
            />
          </div>
        </div>
      }
    </div>
  )
}
